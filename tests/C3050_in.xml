<?xml version="1.0" encoding="utf-8"?>
<APIVSXML>
<!--
 ATC 5401 API Reference Implementation Project 
 
     Filename: C3050_in.xml
    File Type: APIVSXML test script (XML format)
    Test Case: APIRI.TCS.3050
  Description: FIO Frame Frequency
       TC XML: begins on Line 1457
       
 Test Case Narrative
 
   register App 1 with the FIO API 
   register a FIOCMU on SP5 (App 1) 
   setup FIOCMU SDLC response messages 
   enable comm (FIOCMU) 
   register a  FIOOUT14SIU1 on SP5 (App 1) 
   setup FIO SIU* SDLC response messages 
   enable comm (FIOOUT14SIU1) 
   confirm default frame settings and frame counts (APIR3.1.2[71]) 
   test frames (FIOOUT14SIU1) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 49 
   command frame 51 
   command frame 52 
   command frame 53 
   command frame 54 
   command frame 55 
   command frame 60 
   test frames (FIOCMU) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 61 
   command frame 62 
   command frame 65 
   command frame 66 (broadcast frame not included in counts) 
   command frame 67 
   disable FIOCMU comm (App 1)
   deregister FIOCMU device 
   select FIOOUT14SIU1 device (App 1) 
   disable default scheduled frames we are not testing 
   set scheduled frame frequencies to FIO_HZ_0 and confirm (APIR3.1.2[74]) 
   register App 2 with the FIO API 
   register a FIOOUT14SIU1 on SP5 (App 2) 
   enable comm (FIOOUT14SIU1) (App 2) 
   try to test CF49 frame rate at 5Hz (App 2) 
   (should still be at 10Hz and have ~100 successful messages) (APIR3.1.2[75]) 
   test CF49 frame rate at 5Hz (App 1)
   (should be at 5HZ now and have ~50 successful messages) 
   close App 2 
   switch to App 1 
   Test frame 49 frequency rates 1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 
   set CF49 frame rate to 1Hz (App 1)
   (should have ~10 successful messages) 
   set CF49 frame rate to 2Hz (App 1)
   (should have ~20 successful messages) 
   set CF49 frame rate to 5Hz (App 1)
   (should have ~50 successful messages) 
   set CF49 frame rate to 10Hz (App 1)
   (should have ~100 successful messages) 
   set CF49 frame rate to 20Hz (App 1)
   (should have ~200 successful messages) 
   set CF49 frame rate to 30Hz (App 1)
   (should have ~300 successful messages) 
   set CF49 frame rate to 40Hz (App 1)
   (should have ~400 successful messages) 
   set CF49 frame rate to 50Hz (App 1)
   (should have ~500 successful messages) 
   set CF49 frame rate to 60Hz (App 1)
   (should have ~600 successful messages) 
   set CF49 frame rate to 70Hz (App 1)
   (should have ~700 successful messages) 
   set CF49 frame rate to 80Hz (App 1)
   (should have ~800 successful messages) 
   set CF49 frame rate to 90Hz (App 1)
   (should have ~900 successful messages) 
   test CF49 frame rate at 100Hz (App 1)
   (should have ~1000 successful messages) 
   disable frame 49 
   Schedule one-time non-default frame 60 (FIO_HZ_ONCE) (APIR3.1.2[76])
   (should have exactly 1 successful message) 
   confirm transmitted command frame 
   disable FIOOUT14SIU1 (App 1) 
   deregister FIOOUT14SIU1 device 
   register a FIOMMU on SP5 
   setup FIOMMU SDLC response messages 
   enable comm (MMU) 
   register a FIODR1 on SP5 
   setup FIODR1 SDLC response messages 
   enable comm DR1 
   register a FIODR2 on SP5 
   setup FIODR2 SDLC response messages 
   enable comm DR2 
   register a FIODR3 on SP5 
   setup FIODR3 SDLC response messages 
   enable comm DR3 
   register a FIODR4 on SP5 
   setup FIODR4 SDLC response messages 
   enable comm DR4 
   register a FIOTF1 on SP5 
   setup FIOTF1 SDLC response messages 
   enable comm TF1 
   register a FIOTF2 on SP5 
   setup FIOTF2 SDLC response messages 
   enable comm TF2 
   register a FIOTF3 on SP5 
   setup FIOTF3 SDLC response messages 
   enable comm TF3 
   register a FIOTF4 on SP5 
   setup FIOTF4 SDLC response messages 
   enable comm TF4 
   confirm default frame settings and frame counts (APIR3.1.2[72]) 
   test frames (FIOMMU) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 0 
   command frame 1 
   command frame 3 
   command frame 9 (broadcast frame not included in counts) 
   test frames (FIOTF1) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 10 
   test frames (FIOTF2) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 11 
   test frames (FIOTF3) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 12 
   test frames (FIOTF4) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 13 
   command frame 18 (broadcast frame not included in counts) 
   test frames (FIODR1) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 20 
   test frames (FIODR2) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 21 
   test frames (FIODR3) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 22 
   test frames (FIODR4) 
   reset frame count status 
   start test period 
   get device communications status 
   command frame 23 
   disable FIOMMU comm 
   deregister device 
   disable FIODR1 comm 
   deregister device 
   disable FIODR2 comm 
   deregister device 
   disable FIODR3 comm 
   deregister device 
   disable FIODR4 comm 
   deregister device 
   disable FIOTF1 comm 
   deregister device 
   disable FIOTF2 comm 
   deregister device 
   disable FIOTF3 comm 
   deregister device 
   disable FIOTF4 comm 
   deregister device 
   close App 1 

 Requirements Tested
       
 
APIR3.1.2[71]	The ATC Controller Standard, Section 8, specifies the frames for
               communication with Field I/O Devices for Model 332 Cabinets,
               NEMA TS 1 and TS 2 Type 2 Cabinets and ITS Cabinets. The API
               shall support a subset of these frames at the scheduled frame
               frequencies as shown in Table 3.

APIR3.1.2[72]	The NEMA TS 2 Standard, Section 3.3, specifies the frames for
               communication with Field I/O Devices for NEMA TS 2 Type 1
               Cabinets. The API shall support a subset of these frames at the
               scheduled frame frequencies as shown in Table 4.

APIR3.1.2[74]	The API shall provide a method for application programs to
               set/get the scheduled frame frequencies for a registered Field
               I/O Device.

APIR3.1.2[75]	The frame frequency used by the API shall be the highest
               frequency requested by all application programs registered for
               that Field I/O Device.

APIR3.1.2[76]	The API shall provide a method to send a frame from either
               Table 3 or Table 4 one time (non-scheduled).

 Date      Revision    Description
 2/22/16   1.0         initial release
 2/25/16   1.1         second release
 6/2/16    1.2         third release (JMG)
-->

<Define var="$returnCode"     type="int" />
<Define var="$errno"          type="int" />
<Define var="$fio_handle"     type="FIO_APP_HANDLE" />
<Define var="$fio_handle_1"   type="FIO_APP_HANDLE" />
<Define var="$fio_handle_2"   type="FIO_APP_HANDLE" />
<Define var="$fiod_hdl1_CMU"  type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl1_O14S1" type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl2_O14S1" type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl1_MMU"   type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl1_TF1"   type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl1_TF2"   type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl1_TF3"   type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl1_TF4"   type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl1_DR1"   type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl1_DR2"   type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl1_DR3"   type="FIO_DEV_HANDLE" />
<Define var="$fiod_hdl1_DR4"   type="FIO_DEV_HANDLE" />
<Define var="$fiod_handle"    type="FIO_DEV_HANDLE" />
<Define var="$fio_view"       type="FIO_VIEW" />
<Define var="$map_count"      type="int" />
<Define var="$channel_map"    type="FIO_CHANNEL_MAP" />
<Define var="$fill_count"     type="int" />
<Define var="$chan_res"       type="unsigned char []" size="#FIO_CHANNEL_BYTES" />
<Define var="$config_chg"     type="int" />
<Define var="$dark_mask"      type="FIO_CMU_DC_MASK" />
<Define var="$cmu_fsa"        type="FIO_CMU_FSA" />
<Define var="$frame_number"   type="unsigned int" />
<Define var="$notify_freq"    type="FIO_NOTIFY" />
<Define var="$seq_number"     type="unsigned int" />
<Define var="$read_buffer"    type="unsigned char []" size="%128" />
<Define var="$bytes_read"     type="int" />
<Define var="$frame_schds"    type="FIO_FRAME_SCHD" size="%6"/>
<Define var="$frame_schd_cnt" type="int"/>
<Define var="$frame_schd"     type="FIO_FRAME_SCHD" size="%1" />
<Define var="$freq_tst_frame" type="int" />
<Define var="$freq_tst_sched" type="int" />
<Define var="$freq_tst_limit_l" type="int" />
<Define var="$freq_tst_limit_h" type="int" />
<Define var="$frame_size"     type="int" />
<Define var="$write_buffer"   type="unsigned char []" size="%128" />
<Define var="$write_count"    type="unsigned int" />
<Define var="$input_filter"   type="FIO_INPUT_FILTER" size="%1" />
<Define var="$input_type"     type="FIO_INPUTS_TYPE" />
<Define var="$inputs"         type="unsigned char []" size="#FIO_INPUT_POINTS_BYTES" />
<Define var="$trans_status"   type="FIO_TRANS_STATUS" size="%1" />
<Define var="$trans_buf"      type="FIO_TRANS_BUFFER" size="%1" />
<Define var="$trans_count"    type="int" />
<Define var="$flash_bit"      type="FIO_MMU_FLASH_BIT" />
<Define var="$ls_plus"        type="unsigned char []" size="%16" />
<Define var="$ls_minus"       type="unsigned char []" size="%16" />
<Define var="$outputs"        type="unsigned char []" size="#FIO_OUTPUT_POINTS_BYTES" />
<Define var="$fio_port"       type="FIO_PORT" />
<Define var="$fio_device"     type="FIO_DEVICE_TYPE" />
<Define var="$fiod_status"    type="FIO_FIOD_STATUS" />
<Define var="$frame_info"     type="FIO_FRAME_INFO" size="%1" />
<Define var="$fm_state"       type="FIO_TS_FM_STATE" />
<Define var="$vm_state"       type="FIO_TS1_VM_STATE" />
<Define var="$output_point"   type="unsigned int" />
<Define var="$hm_timeout"     type="unsigned int" />
<Define var="$fiod_query"     type="int" />
<Define var="$notify_info"    type="FIO_NOTIFY_INFO" />
<Define var="$time_offset"    type="int" />
<Define var="$num_bytes"      type="unsigned int" />
<Define var="$timeout"        type="unsigned int" />
<Define var="$FIO_asyncsig"   type="boolean" />

<Define var="$abort_mode"     type="boolean" />
<Define var="$failed"         type="boolean" />

<!--
 subroutines for setUp, teardown, error logging
-->
<SetUp name="API_Init_Variables">
   <Set var="$returnCode"  value="%-1"/>
   <Set var="$errno"       value="%0"/>
</SetUp>

<Subroutine name="Error_Handler">
   <If expression="$errno EQ %1" >
      <Then> <Print>EPERM: Operation not permitted</Print> </Then> </If>
   <If expression="$errno EQ %2" >
      <Then> <Print>ENOENT: No such file or directory</Print> </Then> </If>
   <If expression="$errno EQ %3" >
      <Then> <Print>ESRCH: No such process</Print> </Then> </If>
   <If expression="$errno EQ %4" >
      <Then> <Print>EINTR: Interrupted system call</Print> </Then> </If>
   <If expression="$errno EQ %5" >
      <Then> <Print>EIO: I/O error</Print> </Then> </If>
   <If expression="$errno EQ %6" >
      <Then> <Print>ENXIO: No such device or address</Print> </Then> </If>
   <If expression="$errno EQ %7" >
      <Then> <Print>E2BIG: Argument list too long</Print> </Then> </If>
   <If expression="$errno EQ %8" >
      <Then> <Print>ENOEXEC: Exec format error</Print> </Then> </If>
   <If expression="$errno EQ %9" >
      <Then> <Print>EBADF: Bad file number</Print> </Then> </If>
   <If expression="$errno EQ %10" >
      <Then> <Print>ECHILD: No child processes</Print> </Then> </If>
   <If expression="$errno EQ %11" >
      <Then> <Print>EAGAIN: Try again</Print> </Then> </If>
   <If expression="$errno EQ %12" >
      <Then> <Print>ENOMEM: Out of memory</Print> </Then> </If>
   <If expression="$errno EQ %13" >
      <Then> <Print>EACCES: Permission denied</Print> </Then> </If>
   <If expression="$errno EQ %14" >
      <Then> <Print>EFAULT: Bad address</Print> </Then> </If>
   <If expression="$errno EQ %15" >
      <Then> <Print>ENOTBLK: Block device required</Print> </Then> </If>
   <If expression="$errno EQ %16" >
      <Then> <Print>EBUSY: Device or resource busy</Print> </Then> </If>
   <If expression="$errno EQ %17" >
      <Then> <Print>EEXIST: File exists</Print> </Then> </If>
   <If expression="$errno EQ %18" >
      <Then> <Print>EXDEV: Cross-device link</Print> </Then> </If>
   <If expression="$errno EQ %19" >
      <Then> <Print>ENODEV: No such device</Print> </Then> </If>
   <If expression="$errno EQ %20" >
      <Then> <Print>ENOTDIR: Not a directory</Print> </Then> </If>
   <If expression="$errno EQ %21" >
      <Then> <Print>EISDIR: Is a directory</Print> </Then> </If>
   <If expression="$errno EQ %22" >
      <Then> <Print>EINVAL: Invalid argument</Print> </Then> </If>
   <If expression="$errno EQ %23" >
      <Then> <Print>ENFILE: File table overflow</Print> </Then> </If>
   <If expression="$errno EQ %24" >
      <Then> <Print>EMFILE: Too many open files</Print> </Then> </If>
   <If expression="$errno EQ %25" >
      <Then> <Print>ENOTTY: Not a typewriter</Print> </Then> </If>
   <If expression="$errno EQ %26" >
      <Then> <Print>ETXTBSY: Text file busy</Print> </Then> </If>
   <If expression="$errno EQ %27" >
      <Then> <Print>EFBIG: File too large</Print> </Then> </If>
   <If expression="$errno EQ %28" >
      <Then> <Print>ENOSPC: No space left on device</Print> </Then> </If>
   <If expression="$errno EQ %29" >
      <Then> <Print>ESPIPE: Illegal seek</Print> </Then> </If>
   <If expression="$errno EQ %30" >
      <Then> <Print>EROFS: Read-only file system</Print> </Then> </If>
   <If expression="$errno EQ %31" >
      <Then> <Print>EMLINK: Too many links</Print> </Then> </If>
   <If expression="$errno EQ %32" >
      <Then> <Print>EPIPE: Broken pipe</Print> </Then> </If>
   <If expression="$errno EQ %33" >
      <Then> <Print>EDOM: Math argument out of domain of func</Print> </Then> </If>
   <If expression="$errno EQ %34" >
      <Then> <Print>ERANGE: Math result not representable</Print> </Then> </If>
   <If expression="$errno EQ %110" >
      <Then> <Print>ETIMEDOUT: Connection timed out</Print> </Then> </If>
      
   <Format var="$errno" />
   <Set var="$failed" value="#TRUE"/>
   <If expression="$abort_mode EQ #TRUE" >
      <Then> <Abort status="FAIL" /> </Then>
   <Else>
      <Print>Function failed properly (forced)</Print>
   </Else>
   </If>
</Subroutine>

<Subroutine name="Success_Handler">
   <If expression="$abort_mode EQ #FALSE" >
      <Then>
      <Print>Function succeeded but should have failed</Print>
      <Abort status="FAIL" />
      </Then>
   </If>
</Subroutine>

<SignalHandler name="SigHandler" description="Signal handler for FIO_SIGIO">
	<Print>FIO_SIGIO occurred</Print>
	<Set var="$FIO_asyncsig" value="#TRUE"/>
</SignalHandler>

<!--
 subroutines to call API functions and verify return status
-->
<Subroutine name="fio_deregister" description="Call fio_deregister()" >
   <Function funcName="fio_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_begin_outputs_set" description="Call fio_fiod_begin_outputs_set()" >
   <Function funcName="fio_fiod_begin_outputs_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_begin_outputs_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_channel_map_count" description="Call fio_fiod_channel_map_count()" >
   <Function funcName="fio_fiod_channel_map_count"
             return="$map_count"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view" />
   <If expression="$map_count EQ %-1">
      <Then>
      <Print >Function fio_fiod_channel_map_count() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$map_count" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_channel_map_get" description="Call fio_fiod_channel_map_get()" >
   <Function funcName="fio_fiod_channel_map_get"
             return="$fill_count"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
			    p4="$channel_map"
			    p5="$map_count" />
   <If expression="$fill_count EQ %-1">
      <Then>
      <Print>Function fio_fiod_channel_map_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$fill_count" />
      <Format var="$channel_map" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_channel_map_set" description="Call fio_fiod_channel_map_set()" >
   <Function funcName="fio_fiod_channel_map_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$channel_map"
			    p4="$map_count" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_channel_map_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_channel_reservation_get" description="Call fio_fiod_channel_reservation_get()" >
   <Function funcName="fio_fiod_channel_reservation_get" 
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
			    p4="$chan_res"
             p5="!sizeof($chan_res)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_channel_reservation_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_channel_reservation_set" description="Call fio_fiod_channel_reservation_set()" >
   <Function funcName="fio_fiod_channel_reservation_set" 
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$chan_res"
             p4="!sizeof($chan_res)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_channel_reservation_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_cmu_config_change_count" description="Call fio_fiod_cmu_config_change_count()" >
   <Function funcName="fio_fiod_cmu_config_change_count"
             return="$config_chg"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$config_chg EQ %-1">
      <Then>
      <Print>Function fio_fiod_cmu_config_change_count() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$config_chg" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_cmu_dark_channel_get" description="Call fio_fiod_cmu_dark_channel_get()" >
   <Function funcName="fio_fiod_cmu_dark_channel_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
			    p4="$dark_mask" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_cmu_dark_channel_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_cmu_dark_channel_set" description="Call fio_fiod_cmu_dark_channel_set()" >
   <Function funcName="fio_fiod_cmu_dark_channel_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$dark_mask" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_cmu_dark_channel_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_cmu_fault_get" description="Call fio_fiod_cmu_fault_get()" >
   <Function funcName="fio_fiod_cmu_fault_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
			    p4="$cmu_fsa" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_cmu_fault_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_cmu_fault_set" description="Call fio_fiod_cmu_fault_set()" >
   <Function funcName="fio_fiod_cmu_fault_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$cmu_fsa" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_cmu_fault_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_commit_outputs_set" description="Call fio_fiod_commit_outputs_set()" >
   <Function funcName="fio_fiod_commit_outputs_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_commit_outputs_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_deregister" description="Call fio_fiod_deregister()" >
   <Function funcName="fio_fiod_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_disable" description="Call fio_fiod_disable()" >
   <Function funcName="fio_fiod_disable"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_disable() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_enable" description="Call fio_fiod_enable()" >
   <Function funcName="fio_fiod_enable"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_enable() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_notify_deregister" description="Call fio_fiod_frame_notify_deregister()" >
   <Function funcName="fio_fiod_frame_notify_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_number" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_notify_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_notify_register" description="Call fio_fiod_frame_notify_register()" >
   <Function funcName="fio_fiod_frame_notify_register"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_number"
             p4="$notify_freq" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_notify_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_read" description="Call fio_fiod_frame_read()" >
   <Function funcName="fio_fiod_frame_read"
             return="$bytes_read"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_number"
             p4="$seq_number"
             p5="$read_buffer"
             p6="!sizeof($read_buffer)"
             p7="$timeout" />
   <If expression="$bytes_read EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_read() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$frame_number" />
      <Format var="$bytes_read" />
      <Format var="$read_buffer" />
      <Format var="$seq_number" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_schedule_get" description="Call fio_fiod_frame_schedule_get()" >
   <Function funcName="fio_fiod_frame_schedule_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$frame_schds"
             p5="$frame_schd_cnt" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_schedule_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_schedule_set" description="Call fio_fiod_frame_schedule_set()" >
   <Function funcName="fio_fiod_frame_schedule_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_schds"
             p4="$frame_schd_cnt" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_schedule_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_size" description="Call fio_fiod_frame_size()" >
   <Function funcName="fio_fiod_frame_size"
             return="$frame_size"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_number"
             p4="$seq_number" />
   <If expression="$frame_size EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_size() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$frame_size" />
      <Format var="$seq_number" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_write" description="Call fio_fiod_frame_write()" >
   <Function funcName="fio_fiod_frame_write"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_number"
             p4="$write_buffer"
             p5="$write_count" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_write() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_filter_get" description="Call fio_fiod_inputs_filter_get()" >
   <Function funcName="fio_fiod_inputs_filter_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
             p4="$input_filter"
             p5="!sizeof($input_filter)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_filter_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$input_filter" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_filter_set" description="Call fio_fiod_inputs_filter_set()" >
   <Function funcName="fio_fiod_inputs_filter_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$input_filter"
             p4="!sizeof($input_filter)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_filter_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$input_filter" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_get" description="Call fio_fiod_inputs_get()" >
   <Function funcName="fio_fiod_inputs_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$input_type"
             p4="$inputs"
             p5="!sizeof($inputs)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$input_type" />
      <Format var="$inputs" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_trans_get" description="Call fio_fiod_inputs_trans_get()" >
   <Function funcName="fio_fiod_inputs_trans_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
             p4="$inputs"
             p5="!sizeof($inputs)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_trans_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$input_type" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_trans_read" description="Call fio_fiod_inputs_trans_read()" >
   <Function funcName="fio_fiod_inputs_trans_read"
             return="$trans_count"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$trans_status"
             p4="$trans_buf"
             p5="!sizeof($trans_buf)" />
   <If expression="$trans_count EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_trans_read() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$trans_status" />
      <Format var="$trans_buf" />
      <Format var="$trans_count" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_trans_set" description="Call fio_fiod_inputs_trans_set()" >
   <Function funcName="fio_fiod_inputs_trans_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$inputs"
             p4="!sizeof($inputs)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_trans_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$inputs" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_mmu_flash_bit_get" description="Call fio_fiod_mmu_flash_bit_get()" >
   <Function funcName="fio_fiod_mmu_flash_bit_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$flash_bit" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_mmu_flash_bit_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$flash_bit" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_mmu_flash_bit_set" description="Call fio_fiod_mmu_flash_bit_set()" >
   <Function funcName="fio_fiod_mmu_flash_bit_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$flash_bit" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_mmu_flash_bit_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_outputs_get" description="Call fio_fiod_outputs_get()" >
   <Function funcName="fio_fiod_outputs_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$ls_plus"
             p5="$ls_minus"
             p6="!sizeof($ls_plus)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_outputs_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$ls_plus" />
      <Format var="$ls_minus" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_outputs_reservation_get" description="Call fio_fiod_outputs_reservation_get()" >
   <Function funcName="fio_fiod_outputs_reservation_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$outputs"
             p5="!sizeof($outputs)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_outputs_reservation_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$outputs" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_outputs_reservation_set" description="Call fio_fiod_outputs_reservation_set()" >
   <Function funcName="fio_fiod_outputs_reservation_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$outputs"
             p4="!sizeof($outputs)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_outputs_reservation_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_outputs_set" description="Call fio_fiod_outputs_set()" >
   <Function funcName="fio_fiod_outputs_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$ls_plus"
             p4="$ls_minus"
             p5="!sizeof($ls_plus)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_outputs_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_register" description="Call fio_fiod_register()" >
   <Function funcName="fio_fiod_register"
             return="$fiod_handle"
             errno="$errno"
             p1="$fio_handle"
             p2="$fio_port"
             p3="$fio_device" />
   <If expression="$fiod_handle EQ %-1">
      <Then>
      <Print>Function fio_fiod_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_status_get" description="Call fio_fiod_status_get()" >
   <Function funcName="fio_fiod_status_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fiod_status" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_status_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$fiod_status" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_status_reset" description="Call fio_fiod_status_reset()" >
   <Function funcName="fio_fiod_status_reset"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_status_reset() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_ts_fault_monitor_get" description="Call fio_fiod_ts_fault_monitor_get()" >
   <Function funcName="fio_fiod_ts_fault_monitor_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$fm_state" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_ts_fault_monitor_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$fm_state" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_ts_fault_monitor_set" description="Call fio_fiod_ts_fault_monitor_set()" >
   <Function funcName="fio_fiod_ts_fault_monitor_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fm_state" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_ts_fault_monitor_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_ts1_volt_monitor_get" description="Call fio_fiod_ts1_volt_monitor_get()" >
   <Function funcName="fio_fiod_ts1_volt_monitor_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$vm_state" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_ts1_volt_monitor_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$vm_state" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_ts1_volt_monitor_set" description="Call fio_fiod_ts1_volt_monitor_set()" >
   <Function funcName="fio_fiod_ts1_volt_monitor_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$vm_state" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_ts1_volt_monitor_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_wd_deregister" description="Call fio_fiod_wd_deregister()" >
   <Function funcName="fio_fiod_wd_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_wd_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_wd_heartbeat" description="Call fio_fiod_wd_heartbeat()" >
   <Function funcName="fio_fiod_wd_heartbeat"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_wd_heartbeat() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_wd_register" description="Call fio_fiod_wd_register()" >
   <Function funcName="fio_fiod_wd_register"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_wd_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_wd_reservation_get" description="Call fio_fiod_wd_reservation_get()" >
   <Function funcName="fio_fiod_wd_reservation_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$output_point" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_wd_reservation_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$output_point" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_wd_reservation_set" description="Call fio_fiod_wd_reservation_set()" >
   <Function funcName="fio_fiod_wd_reservation_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$output_point" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_wd_reservation_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_hm_deregister" description="Call fio_hm_deregister()" >
   <Function funcName="fio_hm_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_hm_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_hm_fault_reset" description="Call fio_hm_fault_reset()" >
   <Function funcName="fio_hm_fault_reset"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_hm_fault_reset() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_hm_heartbeat" description="Call fio_hm_heartbeat()" >
   <Function funcName="fio_hm_heartbeat"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_hm_heartbeat() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_hm_register" description="Call fio_hm_register()" >
   <Function funcName="fio_hm_register"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$hm_timeout" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_hm_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_query_fiod" description="Call fio_query_fiod()" >
   <Function funcName="fio_query_fiod"
             return="$fiod_query"
             errno="$errno"
             p1="$fio_handle"
             p2="$fio_port"
             p3="$fio_device" />
   <If expression="$fiod_query EQ %-1">
      <Then>
      <Print>Function fio_query_fiod() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$fiod_query" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_query_frame_notify_status" description="Call fio_query_frame_notify_status()" >
   <Function funcName="fio_query_frame_notify_status"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$notify_info" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_query_frame_notify_status() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$notify_info" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_register" description="Call fio_register()" >
   <Function funcName="fio_register"
             return="$fio_handle"
             errno="$errno" />
   <If expression="$fio_handle EQ %-1">
      <Then>
      <Print>Function fio_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_set_local_time_offset" description="Call fio_set_local_time_offset()" >
   <Function funcName="fio_set_local_time_offset"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$time_offset" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_set_local_time_offset() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="frame_frequency_test">
   <Set var="$frame_schds" index="%0" member="req_frame" value="$freq_tst_frame"/>
   <Set var="$frame_schds" index="%0" member="frequency" value="$freq_tst_sched"/>
   <Set var="$frame_schd_cnt" value="%1"/>   
   <Call ref="fio_fiod_frame_schedule_set" setUp="API_Init_Variables"/>
   
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>

   <!-- start of test -->
   <Sleep time="%10"/>

   <!-- verify frame count -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <If expression="$fiod_status.success_rx LT $freq_tst_limit_l">
      <Then>
      <Print>frame frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$fiod_status.success_rx GT $freq_tst_limit_h">
      <Then>
      <Print>frame frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
</Subroutine>

<!--
 test case(s)
-->
<TestCase name="Case_C3050" description="C3050: FIO Frame Frequency" >
   <!-- set abort_mode to FALSE to attempt 'invalid' API function operations;
        script will proceed (not abort) in these cases to allow validation
        of the (forced) error -->
   <!-- when abort_mode is TRUE, script operates normally (abort on error) -->
   <Set var="$abort_mode" value="#TRUE"/>
   <Set var="$failed"     value="#FALSE"/>
   <Set var="$fio_view"   value="#FIO_VIEW_SYSTEM"/>

   <!-- register App 1 with the FIO API -->
   <Call ref="fio_register" setUp="API_Init_Variables"/>
   <Set var="$fio_handle_1" value="$fio_handle"/>
   
   <!-- register a FIOCMU on SP5 (App 1) -->
   <Set var="$fio_port"   value="#FIO_SP5"/>
   <Set var="$fio_device" value="#FIOCMU"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_CMU" value="$fiod_handle"/>

   <!-- setup FIOCMU SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp195.txt" frame="%195" description="(FIO C67->R195)"/>
  
   <!-- enable comm (FIOCMU) -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- register a  FIOOUT14SIU1 on SP5 (App 1) -->
   <Set var="$fio_device" value="#FIOOUT14SIU1"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_O14S1" value="$fiod_handle"/>

   <!-- setup FIO SIU* SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp177.txt" frame="%177" description="(FIO C49->R177)"/>
   <FIOResponse file="@Cxxxx_rsp181a.txt" frame="%181" description="(FIO C53->R181)"/>
   <FIOResponse file="@Cxxxx_rsp183.txt" frame="%183" description="(FIO C55->R183)"/>
   <FIOResponse file="@Cxxxx_rsp188a.txt" frame="%188" description="(FIO C60->R188)"/>

   <!-- enable comm (FIOOUT14SIU1) -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- confirm default frame settings and frame counts (APIR3.1.2[71]) -->

   <!-- test frames (FIOOUT14SIU1) -->
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 49 -->
   <Set var="$frame_info" value="$fiod_status" index="%49"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 49 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 49 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 49 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 51 -->
   <Set var="$frame_info" value="$fiod_status" index="%51"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_0">
      <Then>
      <Print>frame 51 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx NE %0">
      <Then>
      <Print>frame 51 frequency test failed</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 52 -->
   <Set var="$frame_info" value="$fiod_status" index="%52"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_0">
      <Then>
      <Print>frame 52 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx NE %0">
      <Then>
      <Print>frame 52 frequency test failed</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 53 -->
   <Set var="$frame_info" value="$fiod_status" index="%53"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 53 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 53 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 53 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 54 -->
   <Set var="$frame_info" value="$fiod_status" index="%54"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_0">
      <Then>
      <Print>frame 54 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx NE %0">
      <Then>
      <Print>frame 54 frequency test failed</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 55 -->
   <Set var="$frame_info" value="$fiod_status" index="%55"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 55 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 55 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 55 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 60 -->
   <Set var="$frame_info" value="$fiod_status" index="%60"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_0">
      <Then>
      <Print>frame 60 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx NE %0">
      <Then>
      <Print>frame 60 frequency test failed</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>

   <!-- test frames (FIOCMU) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_CMU"/>
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 61 -->
   <Set var="$frame_info" value="$fiod_status" index="%61"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_0">
      <Then>
      <Print>frame 61 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx NE %0">
      <Then>
      <Print>frame 61 frequency test failed</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 62 -->
   <Set var="$frame_info" value="$fiod_status" index="%62"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_0">
      <Then>
      <Print>frame 62 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx NE %0">
      <Then>
      <Print>frame 62 frequency test failed</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 65 -->
   <Set var="$frame_info" value="$fiod_status" index="%65"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_0">
      <Then>
      <Print>frame 65 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx NE %0">
      <Then>
      <Print>frame 65 frequency test failed</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 66 (broadcast frame not included in counts) -->
   <!-- command frame 67 -->
   <Set var="$frame_info" value="$fiod_status" index="%67"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 67 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 67 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 67 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>

   <!-- disable FIOCMU comm (App 1)-->
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister FIOCMU device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>

   <!-- select FIOOUT14SIU1 device (App 1) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_O14S1"/>
   <!-- disable default scheduled frames we are not testing -->
   <!-- set scheduled frame frequencies to FIO_HZ_0 and confirm (APIR3.1.2[74]) -->
   <Set var="$frame_schds" index="%0" member="req_frame" value="%53"/>
   <Set var="$frame_schds" index="%0" member="frequency" value="#FIO_HZ_0"/>
   <Set var="$frame_schds" index="%1" member="req_frame" value="%55"/>
   <Set var="$frame_schds" index="%1" member="frequency" value="#FIO_HZ_0"/>
   <Set var="$frame_schd_cnt" value="%2"/>
   <Call ref="fio_fiod_frame_schedule_set" setUp="API_Init_Variables"/>
   <Call ref="fio_fiod_frame_schedule_get" setUp="API_Init_Variables"/>
   <Set var="$frame_schd" value="$frame_schds" index="%0" />
   <If expression="$frame_schd.req_frame NE %53">
      <Then>
      <Print>frame number incorrect (1)</Print>
      <Format var="$frame_schd"/>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_schd.frequency NE #FIO_HZ_0">
      <Then>
      <Print>frame frequency incorrect (1)</Print>
      <Format var="$frame_schd"/>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <Set var="$frame_schd" value="$frame_schds" index="%1" />
   <If expression="$frame_schd.req_frame NE %55">
      <Then>
      <Print>frame number incorrect (2)</Print>
      <Format var="$frame_schd"/>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_schd.frequency NE #FIO_HZ_0">
      <Then>
      <Print>frame frequency incorrect (2)</Print>
      <Format var="$frame_schd"/>
      <Abort status="FAIL"/>
      </Then>
   </If>
   
   <!-- register App 2 with the FIO API -->
   <Call ref="fio_register" setUp="API_Init_Variables"/>
   <Set var="$fio_handle_2" value="$fio_handle"/>

   <!-- register a FIOOUT14SIU1 on SP5 (App 2) -->
   <Set var="$fio_device" value="#FIOOUT14SIU1"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl2_O14S1" value="$fiod_handle"/>

   <!-- enable comm (FIOOUT14SIU1) (App 2) -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- try to test CF49 frame rate at 5Hz (App 2) -->
   <Set var="$freq_tst_frame" value="%49"/>
   <Set var="$freq_tst_sched" value="#FIO_HZ_5"/>
   <!-- (should still be at 10Hz and have ~100 successful messages) (APIR3.1.2[75]) -->
   <Set var="$freq_tst_limit_h" value="%105"/>
   <Set var="$freq_tst_limit_l" value="%95"/>
   <Call ref="frame_frequency_test" />
   
   <!-- test CF49 frame rate at 5Hz (App 1)-->
   <Set var="$fio_handle"  value="$fio_handle_1"/>
   <Set var="$fiod_handle" value="$fiod_hdl1_O14S1"/>
   <Set var="$freq_tst_sched" value="#FIO_HZ_5"/>
   <!-- (should be at 5HZ now and have ~50 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%53"/>
   <Set var="$freq_tst_limit_l" value="%47"/>
   <Call ref="frame_frequency_test" />

   <!-- close App 2 -->
   <Set var="$fio_handle"  value="$fio_handle_2"/>
   <Set var="$fiod_handle" value="$fiod_hdl2_O14S1"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>
   <Call ref="fio_deregister" setUp="API_Init_Variables"/>

   <!-- switch to App 1 -->
   <Set var="$fio_handle"  value="$fio_handle_1"/>
   <Set var="$fiod_handle" value="$fiod_hdl1_O14S1"/>
   
<!-- Test frame 49 frequency rates 1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 -->
  
   <!-- set CF49 frame rate to 1Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_1"/>
   <!-- (should have ~10 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%11"/>
   <Set var="$freq_tst_limit_l" value="%9"/>
   <Call ref="frame_frequency_test" />

   <!-- set CF49 frame rate to 2Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_2"/>
   <!-- (should have ~20 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%21"/>
   <Set var="$freq_tst_limit_l" value="%19"/>
   <Call ref="frame_frequency_test" />

   <!-- set CF49 frame rate to 5Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_5"/>
   <!-- (should have ~50 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%53"/>
   <Set var="$freq_tst_limit_l" value="%47"/>
   <Call ref="frame_frequency_test" />

   <!-- set CF49 frame rate to 10Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_10"/>
   <!-- (should have ~100 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%105"/>
   <Set var="$freq_tst_limit_l" value="%95"/>
   <Call ref="frame_frequency_test" />

   <!-- set CF49 frame rate to 20Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_20"/>
   <!-- (should have ~200 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%210"/>
   <Set var="$freq_tst_limit_l" value="%190"/>
   <Call ref="frame_frequency_test" />

   <!-- set CF49 frame rate to 30Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_30"/>
   <!-- (should have ~300 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%315"/>
   <Set var="$freq_tst_limit_l" value="%285"/>
   <Call ref="frame_frequency_test" />

   <!-- set CF49 frame rate to 40Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_40"/>
   <!-- (should have ~400 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%420"/>
   <Set var="$freq_tst_limit_l" value="%380"/>
   <Call ref="frame_frequency_test" />

   <!-- set CF49 frame rate to 50Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_50"/>
   <!-- (should have ~500 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%525"/>
   <Set var="$freq_tst_limit_l" value="%475"/>
   <Call ref="frame_frequency_test" />
   
   <!-- set CF49 frame rate to 60Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_60"/>
   <!-- (should have ~600 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%630"/>
   <Set var="$freq_tst_limit_l" value="%570"/>
   <Call ref="frame_frequency_test" />
   
   <!-- set CF49 frame rate to 70Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_70"/>
   <!-- (should have ~700 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%735"/>
   <Set var="$freq_tst_limit_l" value="%665"/>
   <Call ref="frame_frequency_test" />
   
   <!-- set CF49 frame rate to 80Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_80"/>
   <!-- (should have ~800 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%840"/>
   <Set var="$freq_tst_limit_l" value="%760"/>
   <Call ref="frame_frequency_test" />
   
   <!-- set CF49 frame rate to 90Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_90"/>
   <!-- (should have ~900 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%945"/>
   <Set var="$freq_tst_limit_l" value="%855"/>
   <Call ref="frame_frequency_test" />

   <!-- test CF49 frame rate at 100Hz (App 1)-->
   <Set var="$freq_tst_sched" value="#FIO_HZ_100"/>
   <!-- (should have ~1000 successful messages) -->
   <Set var="$freq_tst_limit_h" value="%1050"/>
   <Set var="$freq_tst_limit_l" value="%950"/>
   <Call ref="frame_frequency_test" />

   <!-- disable frame 49 -->
   <Set var="$frame_schds" index="%0" member="req_frame" value="%49"/>
   <Set var="$frame_schds" index="%0" member="frequency" value="#FIO_HZ_0"/>
   <Set var="$frame_schd_cnt" value="%1"/>   
   <Call ref="fio_fiod_frame_schedule_set" setUp="API_Init_Variables"/>

   <!-- Schedule one-time non-default frame 60 (FIO_HZ_ONCE) (APIR3.1.2[76])-->
   <Set var="$freq_tst_frame" value="%60"/>
   <Set var="$freq_tst_sched" value="#FIO_HZ_ONCE"/>
   <!-- (should have exactly 1 successful message) -->
   <Set var="$freq_tst_limit_h" value="%1"/>
   <Set var="$freq_tst_limit_l" value="%1"/>
   <Call ref="frame_frequency_test" />

   <!-- confirm transmitted command frame -->
   <If expression="!CMDMSGCompare(@Cxxxx_cmd60.txt,%60) EQ #FALSE">
      <Then>
      <Print>CMDMSG 60 incorrect</Print>
      <Dump dump="CMDMSG" force="#TRUE" file="@Cxxxx_cmd60_err.txt" frame="%60"/>
      <Abort status="FAIL" />
      </Then>
   </If>

   <!-- disable FIOOUT14SIU1 (App 1) -->
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister FIOOUT14SIU1 device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>


   <!-- register a FIOMMU on SP5 -->
   <Set var="$fio_device" value="#FIOMMU"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_MMU" value="$fiod_handle"/>

   <!-- setup FIOMMU SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp128.txt" frame="%128" description="(FIO C0->R128)"/>
   <FIOResponse file="@Cxxxx_rsp129.txt" frame="%129" description="(FIO C1->R129)"/>
   <FIOResponse file="@Cxxxx_rsp131.txt" frame="%131" description="(FIO C3->R131)"/>
  
   <!-- enable comm (MMU) -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- register a FIODR1 on SP5 -->
   <Set var="$fio_device" value="#FIODR1"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_DR1" value="$fiod_handle"/>

   <!-- setup FIODR1 SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp148.txt" frame="%148" description="(FIO C20->R148)"/>

   <!-- enable comm DR1 -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- register a FIODR2 on SP5 -->
   <Set var="$fio_device" value="#FIODR2"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_DR2" value="$fiod_handle"/>

   <!-- setup FIODR2 SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp149.txt" frame="%149" description="(FIO C21->R149)"/>
  
   <!-- enable comm DR2 -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- register a FIODR3 on SP5 -->
   <Set var="$fio_device" value="#FIODR3"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_DR3" value="$fiod_handle"/>

   <!-- setup FIODR3 SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp150.txt" frame="%150" description="(FIO C22->R150)"/>
  
   <!-- enable comm DR3 -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- register a FIODR4 on SP5 -->
   <Set var="$fio_device" value="#FIODR4"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_DR4" value="$fiod_handle"/>

   <!-- setup FIODR4 SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp151.txt" frame="%151" description="(FIO C23->R151)"/>
  
   <!-- enable comm DR4 -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- register a FIOTF1 on SP5 -->
   <Set var="$fio_device" value="#FIOTF1"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_TF1" value="$fiod_handle"/>

   <!-- setup FIOTF1 SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp138.txt" frame="%138" description="(FIO C10->R138)"/>
  
   <!-- enable comm TF1 -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- register a FIOTF2 on SP5 -->
   <Set var="$fio_device" value="#FIOTF2"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_TF2" value="$fiod_handle"/>

   <!-- setup FIOTF2 SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp139.txt" frame="%139" description="(FIO C11->R139)"/>
  
   <!-- enable comm TF2 -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- register a FIOTF3 on SP5 -->
   <Set var="$fio_device" value="#FIOTF3"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_TF3" value="$fiod_handle"/>

   <!-- setup FIOTF3 SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp140.txt" frame="%140" description="(FIO C12->R140)"/>
  
   <!-- enable comm TF3 -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- register a FIOTF4 on SP5 -->
   <Set var="$fio_device" value="#FIOTF4"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_hdl1_TF4" value="$fiod_handle"/>

   <!-- setup FIOTF4 SDLC response messages -->
   <FIOResponse file="@Cxxxx_rsp141.txt" frame="%141" description="(FIO C13->R141)"/>
  
   <!-- enable comm TF4 -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- confirm default frame settings and frame counts (APIR3.1.2[72]) -->

   <!-- test frames (FIOMMU) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_MMU"/>
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 0 -->
   <Set var="$frame_info" value="$fiod_status" index="%0"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 0 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 0 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 0 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 1 -->
   <Set var="$frame_info" value="$fiod_status" index="%1"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 1 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 1 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 1 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 3 -->
   <Set var="$frame_info" value="$fiod_status" index="%3"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_1">
      <Then>
      <Print>frame 3 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %9">
      <Then>
      <Print>frame 3 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %11">
      <Then>
      <Print>frame 3 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 9 (broadcast frame not included in counts) -->
   <!-- test frames (FIOTF1) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_TF1"/>
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 10 -->
   <Set var="$frame_info" value="$fiod_status" index="%10"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 10 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 10 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 10 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- test frames (FIOTF2) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_TF2"/>
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 11 -->
   <Set var="$frame_info" value="$fiod_status" index="%11"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 11 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 11 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 11 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- test frames (FIOTF3) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_TF3"/>
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 12 -->
   <Set var="$frame_info" value="$fiod_status" index="%12"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 12 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 12 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 12 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- test frames (FIOTF4) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_TF4"/>
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 13 -->
   <Set var="$frame_info" value="$fiod_status" index="%13"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 13 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 13 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 13 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- command frame 18 (broadcast frame not included in counts) -->
   <!-- test frames (FIODR1) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_DR1"/>
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 20 -->
   <Set var="$frame_info" value="$fiod_status" index="%20"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 20 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 20 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 20 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- test frames (FIODR2) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_DR2"/>
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 21 -->
   <Set var="$frame_info" value="$fiod_status" index="%21"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 21 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 21 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 21 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- test frames (FIODR3) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_DR3"/>
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 22 -->
   <Set var="$frame_info" value="$fiod_status" index="%22"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 22 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 22 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 22 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- test frames (FIODR4) -->
   <Set var="$fiod_handle" value="$fiod_hdl1_DR4"/>
   <!-- reset frame count status -->
   <Call ref="fio_fiod_status_reset" setUp="API_Init_Variables"/>
   <!-- start test period -->
   <Sleep time="%10"/>
   <!-- get device communications status -->
   <Call ref="fio_fiod_status_get" setUp="API_Init_Variables"/>
   <!-- command frame 23 -->
   <Set var="$frame_info" value="$fiod_status" index="%23"/>
   <If expression="$frame_info.frequency NE #FIO_HZ_10">
      <Then>
      <Print>frame 23 default frequency incorrect</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx LT %95">
      <Then>
      <Print>frame 23 frequency test failed (LOW)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$frame_info.success_rx GT %105">
      <Then>
      <Print>frame 23 frequency test failed (HIGH)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>

   <!-- disable FIOMMU comm -->
   <Set var="$fiod_handle" value="$fiod_hdl1_MMU"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>

   <!-- disable FIODR1 comm -->
   <Set var="$fiod_handle" value="$fiod_hdl1_DR1"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>

   <!-- disable FIODR2 comm -->
   <Set var="$fiod_handle" value="$fiod_hdl1_DR2"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>

   <!-- disable FIODR3 comm -->
   <Set var="$fiod_handle" value="$fiod_hdl1_DR3"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>

   <!-- disable FIODR4 comm -->
   <Set var="$fiod_handle" value="$fiod_hdl1_DR4"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>

   <!-- disable FIOTF1 comm -->
   <Set var="$fiod_handle" value="$fiod_hdl1_TF1"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>

   <!-- disable FIOTF2 comm -->
   <Set var="$fiod_handle" value="$fiod_hdl1_TF2"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>

   <!-- disable FIOTF3 comm -->
   <Set var="$fiod_handle" value="$fiod_hdl1_TF3"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>

   <!-- disable FIOTF4 comm -->
   <Set var="$fiod_handle" value="$fiod_hdl1_TF4"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>
   <!-- deregister device -->
   <Call ref="fio_fiod_deregister" setUp="API_Init_Variables"/>


   <!-- close App 1 -->
   <Call ref="fio_deregister" setUp="API_Init_Variables"/>
</TestCase>

<!--
 test suite(s)
-->
<TestSuite name="All_Test_Cases" description="Run All Test Cases" >
  <TestCaseRef ref="Case_C3050" />
</TestSuite>

</APIVSXML>

