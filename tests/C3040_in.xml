<?xml version="1.0" encoding="utf-8"?>
<APIVSXML>
<!--
 ATC 5401 API Reference Implementation Project 
 
     Filename: C3040_in.xml
    File Type: APIVSXML test script (XML format)
    Test Case: APIRI.TCS.3040
  Description: FIO Filtered Inputs and Transition Buffering
       TC XML: begins on Line 1325
       
 Test Case Narrative
 
   register two 'apps' with the FIO API 
   register a 332-type FIO on SP5 each app  
   setup SDLC response messages (including transition buffering) 
   schedule the raw inputs request frame 52 
   enable FIO332 APP 1 
   enable FIO332 APP 2 
   get input filters: confirm defaults are 5 samples (APIR3.1.2[59]) 
   APP 1 change lead filter to 3, trailing filter to 3 (APIR3.1.2[56]) 
   verify new values 
   APP 2 change lead filter to 2, trailing filter to 4 
   verify shortest values of App 1 and App 2 are used (APIR3.1.2[57]) 
   verify values used are returned by set filter operation (APIR3.1.2[58]) 
   transition buffer inputs (App 1) 
   confirm monitoring is disabled by default for all inputs (APIR3.1.2[64]) 
   disable all input transitions monitoring 
   disable again, should be no error (APIR3.1.2[66]) 
   enable select input transition monitoring (App 1) (APIR3.1.2[63]) 
   verify test input transition point set 
   enable again, should be no error (APIR3.1.2[65]) 
   enable same input transition point (App 2) 
   verify test input transition point set 
   create a transition entry 
   schedule the transition buffer request frame 54 
   read transition entry (App 1) (APIR3.1.2[60]) 
   create a second, different transition entry 
   schedule the transition buffer request frame 54 
   confirm that we can read the same first entry (App 2) independent
        of newer transition frames (APIR3.1.2[67]) and unaffected by the
        earlier transition entry read by App 1 (APIR3.1.2[68]) 
   read second transition entry (App 2) 
   enable input transitions (inputs 0,1,2,3,4) (App 2) 
   generate a response buffer with 255 further transition entries
        and Field I/O Device overrun indication 
   schedule the transition buffer request frame 54 
   verify that all 255 transitions are available (App 2) (APIR3.1.2[61]) 
   verify that the FIOD overrun status is returned (APIR3.1.2[69]) 
   generate transition buffer response frames with > 1024 entries 
   schedule the transition buffer request frame 54 
   verify that the API retains a FIFO of 1024 entries (APIR3.1.2[62]) 
   verify that the API overrun status is returned (APIR3.1.2[70]) 
   disable fiod (App2) 
   disable fiod (App1) 
   close both apps 

 Requirements Tested
       
APIR3.1.2[56]	The API shall provide functions which allow application programs
               to set and get the leading and trailing edge filter values on a
               per input basis for all Field I/O Devices that support
               configurable filtered inputs.

APIR3.1.2[57]	If multiple application programs set the filter values of an
               input, the shortest filter values shall be used.

APIR3.1.2[58]	The API shall provide a return code containing the status and
               the value used for the set filter operation.

APIR3.1.2[59]	The default leading and trailing edge filter values shall be
               five (5) consecutive samples.

APIR3.1.2[60]	The API shall have the ability to collect and buffer the
               transition buffer information for each registered Field
               I/O Device used for input.

APIR3.1.2[61]	When the API reads the transition buffer of a Field I/O Device,
               it shall read the entire transition buffer.

APIR3.1.2[62]	The API shall buffer the transition data on a per application
               program basis with the capability of storing 1024 transition
               entries in a FIFO fashion.

APIR3.1.2[63]	The API shall provide a function which allows application
               programs to enable or disable transition monitoring of selected
               input points.

APIR3.1.2[64]	By default, transition monitoring for all input points shall be
               disabled.

APIR3.1.2[65]	If an application program enables an input point for transition
               monitoring and that input point is already in the enabled state,
               it shall not be considered an error.

APIR3.1.2[66]	If an application program disables an input point for transition
               monitoring and that input point is already in the disabled state,
               it shall not be considered an error.

APIR3.1.2[67]	The API shall provide functions that allow application programs
               to access the API transition buffer information asynchronously
               (i.e. read the transition entries from the API buffer independent
               of any Field I/O Device communications).

APIR3.1.2[68]	When an application program reads a transition entry from an API
               transition buffer, that transition entry shall be cleared for
               that application program only, without affecting the API
               transition buffers for other application programs.

APIR3.1.2[69]	If the transition buffer in the Field I/O Device overruns before
               information can be copied to the API transition buffer information,
               the API shall indicate that a device overrun condition has occurred
               in the transition buffer for that Field I/O Device.

APIR3.1.2[70]	If the transition buffer of the API overruns before the information
               is retrieved by the application program, the API shall indicate that
               an API overrun condition has occurred.

 Date      Revision    Description
 2/22/16   1.0         initial release
 2/25/16   1.1         second release
 5/31/16   1.2         third release (JMG)
-->

<Define var="$returnCode"     type="int" />
<Define var="$errno"          type="int" />
<Define var="$fio_handle"     type="FIO_APP_HANDLE" />
<Define var="$fio_handle_1"   type="FIO_APP_HANDLE" />
<Define var="$fio_handle_2"   type="FIO_APP_HANDLE" />
<Define var="$fiod_handle"    type="FIO_DEV_HANDLE" />
<Define var="$fiod_handle_1"  type="FIO_DEV_HANDLE" />
<Define var="$fiod_handle_2"  type="FIO_DEV_HANDLE" />
<Define var="$fio_view"       type="FIO_VIEW" />
<Define var="$map_count"      type="int" />
<Define var="$channel_map"    type="FIO_CHANNEL_MAP" />
<Define var="$fill_count"     type="int" />
<Define var="$chan_res"       type="unsigned char []" size="#FIO_CHANNEL_BYTES" />
<Define var="$config_chg"     type="int" />
<Define var="$dark_mask"      type="FIO_CMU_DC_MASK" />
<Define var="$cmu_fsa"        type="FIO_CMU_FSA" />
<Define var="$frame_number"   type="unsigned int" />
<Define var="$notify_freq"    type="FIO_NOTIFY" />
<Define var="$seq_number"     type="unsigned int" />
<Define var="$read_buffer"    type="unsigned char []" size="%128" />
<Define var="$bytes_read"     type="int" />
<Define var="$frame_sched"    type="FIO_FRAME_SCHD" size="%1" />
<Define var="$frame_size"     type="int" />
<Define var="$write_buffer"   type="unsigned char []" size="%128" />
<Define var="$write_count"    type="unsigned int" />
<Define var="$input_filters"   type="FIO_INPUT_FILTER" size="%1" />
<Define var="$input_filter"   type="FIO_INPUT_FILTER" size="%1" />
<Define var="$input_type"     type="FIO_INPUTS_TYPE" />
<Define var="$inputs"         type="unsigned char []" size="#FIO_INPUT_POINTS_BYTES" />
<Define var="$input_number"   type="int" />
<Define var="$trans_status"   type="FIO_TRANS_STATUS" size="%1" />
<Define var="$trans_buf"      type="FIO_TRANS_BUFFER" size="%1024" />
<Define var="$trans_entry"    type="FIO_TRANS_BUFFER" size="%1" />
<Define var="$trans_count"    type="int" />
<Define var="$flash_bit"      type="FIO_MMU_FLASH_BIT" />
<Define var="$ls_plus"        type="unsigned char []" size="%16" />
<Define var="$ls_minus"       type="unsigned char []" size="%16" />
<Define var="$outputs"        type="unsigned char []" size="#FIO_OUTPUT_POINTS_BYTES" />
<Define var="$fio_port"       type="FIO_PORT" />
<Define var="$fio_device"     type="FIO_DEVICE_TYPE" />
<Define var="$fiod_status"    type="FIO_FIOD_STATUS" />
<Define var="$fm_state"       type="FIO_TS_FM_STATE" />
<Define var="$vm_state"       type="FIO_TS1_VM_STATE" />
<Define var="$output_point"   type="unsigned int" />
<Define var="$hm_timeout"     type="unsigned int" />
<Define var="$fiod_query"     type="int" />
<Define var="$notify_info"    type="FIO_NOTIFY_INFO" />
<Define var="$time_offset"    type="int" />
<Define var="$num_bytes"      type="unsigned int" />
<Define var="$timeout"        type="unsigned int" />
<Define var="$FIO_asyncsig"   type="boolean" />
<Define var="$loop_count"     type="int" />
<Define var="$input_state"    type="int" />

<Define var="$abort_mode"     type="boolean" />
<Define var="$failed"         type="boolean" />

<!--
 subroutines for setUp, teardown, error logging
-->
<SetUp name="API_Init_Variables">
   <Set var="$returnCode"  value="%-1"/>
   <Set var="$errno"       value="%0"/>
</SetUp>

<Subroutine name="Error_Handler">
   <If expression="$errno EQ %1" >
      <Then> <Print>EPERM: Operation not permitted</Print> </Then> </If>
   <If expression="$errno EQ %2" >
      <Then> <Print>ENOENT: No such file or directory</Print> </Then> </If>
   <If expression="$errno EQ %3" >
      <Then> <Print>ESRCH: No such process</Print> </Then> </If>
   <If expression="$errno EQ %4" >
      <Then> <Print>EINTR: Interrupted system call</Print> </Then> </If>
   <If expression="$errno EQ %5" >
      <Then> <Print>EIO: I/O error</Print> </Then> </If>
   <If expression="$errno EQ %6" >
      <Then> <Print>ENXIO: No such device or address</Print> </Then> </If>
   <If expression="$errno EQ %7" >
      <Then> <Print>E2BIG: Argument list too long</Print> </Then> </If>
   <If expression="$errno EQ %8" >
      <Then> <Print>ENOEXEC: Exec format error</Print> </Then> </If>
   <If expression="$errno EQ %9" >
      <Then> <Print>EBADF: Bad file number</Print> </Then> </If>
   <If expression="$errno EQ %10" >
      <Then> <Print>ECHILD: No child processes</Print> </Then> </If>
   <If expression="$errno EQ %11" >
      <Then> <Print>EAGAIN: Try again</Print> </Then> </If>
   <If expression="$errno EQ %12" >
      <Then> <Print>ENOMEM: Out of memory</Print> </Then> </If>
   <If expression="$errno EQ %13" >
      <Then> <Print>EACCES: Permission denied</Print> </Then> </If>
   <If expression="$errno EQ %14" >
      <Then> <Print>EFAULT: Bad address</Print> </Then> </If>
   <If expression="$errno EQ %15" >
      <Then> <Print>ENOTBLK: Block device required</Print> </Then> </If>
   <If expression="$errno EQ %16" >
      <Then> <Print>EBUSY: Device or resource busy</Print> </Then> </If>
   <If expression="$errno EQ %17" >
      <Then> <Print>EEXIST: File exists</Print> </Then> </If>
   <If expression="$errno EQ %18" >
      <Then> <Print>EXDEV: Cross-device link</Print> </Then> </If>
   <If expression="$errno EQ %19" >
      <Then> <Print>ENODEV: No such device</Print> </Then> </If>
   <If expression="$errno EQ %20" >
      <Then> <Print>ENOTDIR: Not a directory</Print> </Then> </If>
   <If expression="$errno EQ %21" >
      <Then> <Print>EISDIR: Is a directory</Print> </Then> </If>
   <If expression="$errno EQ %22" >
      <Then> <Print>EINVAL: Invalid argument</Print> </Then> </If>
   <If expression="$errno EQ %23" >
      <Then> <Print>ENFILE: File table overflow</Print> </Then> </If>
   <If expression="$errno EQ %24" >
      <Then> <Print>EMFILE: Too many open files</Print> </Then> </If>
   <If expression="$errno EQ %25" >
      <Then> <Print>ENOTTY: Not a typewriter</Print> </Then> </If>
   <If expression="$errno EQ %26" >
      <Then> <Print>ETXTBSY: Text file busy</Print> </Then> </If>
   <If expression="$errno EQ %27" >
      <Then> <Print>EFBIG: File too large</Print> </Then> </If>
   <If expression="$errno EQ %28" >
      <Then> <Print>ENOSPC: No space left on device</Print> </Then> </If>
   <If expression="$errno EQ %29" >
      <Then> <Print>ESPIPE: Illegal seek</Print> </Then> </If>
   <If expression="$errno EQ %30" >
      <Then> <Print>EROFS: Read-only file system</Print> </Then> </If>
   <If expression="$errno EQ %31" >
      <Then> <Print>EMLINK: Too many links</Print> </Then> </If>
   <If expression="$errno EQ %32" >
      <Then> <Print>EPIPE: Broken pipe</Print> </Then> </If>
   <If expression="$errno EQ %33" >
      <Then> <Print>EDOM: Math argument out of domain of func</Print> </Then> </If>
   <If expression="$errno EQ %34" >
      <Then> <Print>ERANGE: Math result not representable</Print> </Then> </If>
   <If expression="$errno EQ %110" >
      <Then> <Print>ETIMEDOUT: Connection timed out</Print> </Then> </If>
      
   <Format var="$errno" />
   <Set var="$failed" value="#TRUE"/>
   <If expression="$abort_mode EQ #TRUE" >
      <Then> <Abort status="FAIL" /> </Then>
   <Else>
      <Print>Function failed properly (forced)</Print>
   </Else>
   </If>
</Subroutine>

<Subroutine name="Success_Handler">
   <If expression="$abort_mode EQ #FALSE" >
      <Then>
      <Print>Function succeeded but should have failed</Print>
      <Abort status="FAIL" />
      </Then>
   </If>
</Subroutine>

<SignalHandler name="SigHandler" description="Signal handler for FIO_SIGIO">
	<Print>FIO_SIGIO occurred</Print>
	<Set var="$FIO_asyncsig" value="#TRUE"/>
</SignalHandler>

<!--
 subroutines to call API functions and verify return status
-->
<Subroutine name="fio_deregister" description="Call fio_deregister()" >
   <Function funcName="fio_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_begin_outputs_set" description="Call fio_fiod_begin_outputs_set()" >
   <Function funcName="fio_fiod_begin_outputs_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_begin_outputs_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_channel_map_count" description="Call fio_fiod_channel_map_count()" >
   <Function funcName="fio_fiod_channel_map_count"
             return="$map_count"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view" />
   <If expression="$map_count EQ %-1">
      <Then>
      <Print >Function fio_fiod_channel_map_count() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$map_count" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_channel_map_get" description="Call fio_fiod_channel_map_get()" >
   <Function funcName="fio_fiod_channel_map_get"
             return="$fill_count"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
			    p4="$channel_map"
			    p5="$map_count" />
   <If expression="$fill_count EQ %-1">
      <Then>
      <Print>Function fio_fiod_channel_map_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$fill_count" />
      <Format var="$channel_map" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_channel_map_set" description="Call fio_fiod_channel_map_set()" >
   <Function funcName="fio_fiod_channel_map_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$channel_map"
			    p4="$map_count" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_channel_map_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_channel_reservation_get" description="Call fio_fiod_channel_reservation_get()" >
   <Function funcName="fio_fiod_channel_reservation_get" 
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
			    p4="$chan_res"
             p5="!sizeof($chan_res)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_channel_reservation_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_channel_reservation_set" description="Call fio_fiod_channel_reservation_set()" >
   <Function funcName="fio_fiod_channel_reservation_set" 
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$chan_res"
             p4="!sizeof($chan_res)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_channel_reservation_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_cmu_config_change_count" description="Call fio_fiod_cmu_config_change_count()" >
   <Function funcName="fio_fiod_cmu_config_change_count"
             return="$config_chg"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$config_chg EQ %-1">
      <Then>
      <Print>Function fio_fiod_cmu_config_change_count() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$config_chg" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_cmu_dark_channel_get" description="Call fio_fiod_cmu_dark_channel_get()" >
   <Function funcName="fio_fiod_cmu_dark_channel_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
			    p4="$dark_mask" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_cmu_dark_channel_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_cmu_dark_channel_set" description="Call fio_fiod_cmu_dark_channel_set()" >
   <Function funcName="fio_fiod_cmu_dark_channel_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$dark_mask" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_cmu_dark_channel_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_cmu_fault_get" description="Call fio_fiod_cmu_fault_get()" >
   <Function funcName="fio_fiod_cmu_fault_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
			    p4="$cmu_fsa" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_cmu_fault_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_cmu_fault_set" description="Call fio_fiod_cmu_fault_set()" >
   <Function funcName="fio_fiod_cmu_fault_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$cmu_fsa" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_cmu_fault_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_commit_outputs_set" description="Call fio_fiod_commit_outputs_set()" >
   <Function funcName="fio_fiod_commit_outputs_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_commit_outputs_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_deregister" description="Call fio_fiod_deregister()" >
   <Function funcName="fio_fiod_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_disable" description="Call fio_fiod_disable()" >
   <Function funcName="fio_fiod_disable"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_disable() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_enable" description="Call fio_fiod_enable()" >
   <Function funcName="fio_fiod_enable"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_enable() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_notify_deregister" description="Call fio_fiod_frame_notify_deregister()" >
   <Function funcName="fio_fiod_frame_notify_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_number" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_notify_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_notify_register" description="Call fio_fiod_frame_notify_register()" >
   <Function funcName="fio_fiod_frame_notify_register"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_number"
             p4="$notify_freq" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_notify_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_read" description="Call fio_fiod_frame_read()" >
   <Function funcName="fio_fiod_frame_read"
             return="$bytes_read"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_number"
             p4="$seq_number"
             p5="$read_buffer"
             p6="!sizeof($read_buffer)"
             p7="$timeout" />
   <If expression="$bytes_read EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_read() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$frame_number" />
      <Format var="$bytes_read" />
      <Format var="$read_buffer" />
      <Format var="$seq_number" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_schedule_get" description="Call fio_fiod_frame_schedule_get()" >
   <Function funcName="fio_fiod_frame_schedule_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
             p4="$frame_sched"
             p5="!sizeof($frame_sched)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_schedule_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$frame_sched" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_schedule_set" description="Call fio_fiod_frame_schedule_set()" >
   <Function funcName="fio_fiod_frame_schedule_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_sched"
             p4="!sizeof($frame_sched)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_schedule_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_size" description="Call fio_fiod_frame_size()" >
   <Function funcName="fio_fiod_frame_size"
             return="$frame_size"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_number"
             p4="$seq_number" />
   <If expression="$frame_size EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_size() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$frame_size" />
      <Format var="$seq_number" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_frame_write" description="Call fio_fiod_frame_write()" >
   <Function funcName="fio_fiod_frame_write"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$frame_number"
             p4="$write_buffer"
             p5="$write_count" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_frame_write() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_filter_get" description="Call fio_fiod_inputs_filter_get()" >
   <Function funcName="fio_fiod_inputs_filter_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$input_filters"
             p5="!sizeof($input_filters)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_filter_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$input_filters" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_filter_set" description="Call fio_fiod_inputs_filter_set()" >
   <Function funcName="fio_fiod_inputs_filter_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$input_filters"
             p4="!sizeof($input_filters)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_filter_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$input_filters" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_get" description="Call fio_fiod_inputs_get()" >
   <Function funcName="fio_fiod_inputs_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$input_type"
             p4="$inputs"
             p5="!sizeof($inputs)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$input_type" />
      <Format var="$inputs" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_trans_get" description="Call fio_fiod_inputs_trans_get()" >
   <Function funcName="fio_fiod_inputs_trans_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
			    p3="$fio_view"
             p4="$inputs"
             p5="!sizeof($inputs)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_trans_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$input_type" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_trans_read" description="Call fio_fiod_inputs_trans_read()" >
   <Function funcName="fio_fiod_inputs_trans_read"
             return="$trans_count"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$trans_status"
             p4="$trans_buf"
             p5="$trans_count" />
   <If expression="$trans_count EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_trans_read() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$trans_status" />
      <Format var="$trans_count" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_inputs_trans_set" description="Call fio_fiod_inputs_trans_set()" >
   <Function funcName="fio_fiod_inputs_trans_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$inputs"
             p4="!sizeof($inputs)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_inputs_trans_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$inputs" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_mmu_flash_bit_get" description="Call fio_fiod_mmu_flash_bit_get()" >
   <Function funcName="fio_fiod_mmu_flash_bit_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$flash_bit" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_mmu_flash_bit_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$flash_bit" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_mmu_flash_bit_set" description="Call fio_fiod_mmu_flash_bit_set()" >
   <Function funcName="fio_fiod_mmu_flash_bit_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$flash_bit" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_mmu_flash_bit_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_outputs_get" description="Call fio_fiod_outputs_get()" >
   <Function funcName="fio_fiod_outputs_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$ls_plus"
             p5="$ls_minus"
             p6="!sizeof($ls_plus)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_outputs_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$ls_plus" />
      <Format var="$ls_minus" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_outputs_reservation_get" description="Call fio_fiod_outputs_reservation_get()" >
   <Function funcName="fio_fiod_outputs_reservation_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$outputs"
             p5="!sizeof($outputs)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_outputs_reservation_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$outputs" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_outputs_reservation_set" description="Call fio_fiod_outputs_reservation_set()" >
   <Function funcName="fio_fiod_outputs_reservation_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$outputs"
             p4="!sizeof($outputs)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_outputs_reservation_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_outputs_set" description="Call fio_fiod_outputs_set()" >
   <Function funcName="fio_fiod_outputs_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$ls_plus"
             p4="$ls_minus"
             p5="!sizeof($ls_plus)" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_outputs_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_register" description="Call fio_fiod_register()" >
   <Function funcName="fio_fiod_register"
             return="$fiod_handle"
             errno="$errno"
             p1="$fio_handle"
             p2="$fio_port"
             p3="$fio_device" />
   <If expression="$fiod_handle EQ %-1">
      <Then>
      <Print>Function fio_fiod_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_status_get" description="Call fio_fiod_status_get()" >
   <Function funcName="fio_fiod_status_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fiod_status" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_status_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$fiod_status" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_status_reset" description="Call fio_fiod_status_reset()" >
   <Function funcName="fio_fiod_status_reset"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_status_reset() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_ts_fault_monitor_get" description="Call fio_fiod_ts_fault_monitor_get()" >
   <Function funcName="fio_fiod_ts_fault_monitor_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$fm_state" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_ts_fault_monitor_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$fm_state" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_ts_fault_monitor_set" description="Call fio_fiod_ts_fault_monitor_set()" >
   <Function funcName="fio_fiod_ts_fault_monitor_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fm_state" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_ts_fault_monitor_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_ts1_volt_monitor_get" description="Call fio_fiod_ts1_volt_monitor_get()" >
   <Function funcName="fio_fiod_ts1_volt_monitor_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$fio_view"
             p4="$vm_state" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_ts1_volt_monitor_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$vm_state" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_ts1_volt_monitor_set" description="Call fio_fiod_ts1_volt_monitor_set()" >
   <Function funcName="fio_fiod_ts1_volt_monitor_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$vm_state" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_ts1_volt_monitor_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_wd_deregister" description="Call fio_fiod_wd_deregister()" >
   <Function funcName="fio_fiod_wd_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_wd_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_wd_heartbeat" description="Call fio_fiod_wd_heartbeat()" >
   <Function funcName="fio_fiod_wd_heartbeat"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_wd_heartbeat() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_wd_register" description="Call fio_fiod_wd_register()" >
   <Function funcName="fio_fiod_wd_register"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_wd_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_wd_reservation_get" description="Call fio_fiod_wd_reservation_get()" >
   <Function funcName="fio_fiod_wd_reservation_get"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$output_point" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_wd_reservation_get() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$output_point" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_fiod_wd_reservation_set" description="Call fio_fiod_wd_reservation_set()" >
   <Function funcName="fio_fiod_wd_reservation_set"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$fiod_handle"
             p3="$output_point" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_fiod_wd_reservation_set() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_hm_deregister" description="Call fio_hm_deregister()" >
   <Function funcName="fio_hm_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_hm_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_hm_fault_reset" description="Call fio_hm_fault_reset()" >
   <Function funcName="fio_hm_fault_reset"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_hm_fault_reset() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_hm_heartbeat" description="Call fio_hm_heartbeat()" >
   <Function funcName="fio_hm_heartbeat"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_hm_heartbeat() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_hm_register" description="Call fio_hm_register()" >
   <Function funcName="fio_hm_register"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$hm_timeout" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_hm_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_query_fiod" description="Call fio_query_fiod()" >
   <Function funcName="fio_query_fiod"
             return="$fiod_query"
             errno="$errno"
             p1="$fio_handle"
             p2="$fio_port"
             p3="$fio_device" />
   <If expression="$fiod_query EQ %-1">
      <Then>
      <Print>Function fio_query_fiod() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$fiod_query" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_query_frame_notify_status" description="Call fio_query_frame_notify_status()" >
   <Function funcName="fio_query_frame_notify_status"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$notify_info" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_query_frame_notify_status() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$notify_info" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_register" description="Call fio_register()" >
   <Function funcName="fio_register"
             return="$fio_handle"
             errno="$errno" />
   <If expression="$fio_handle EQ %-1">
      <Then>
      <Print>Function fio_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_set_local_time_offset" description="Call fio_set_local_time_offset()" >
   <Function funcName="fio_set_local_time_offset"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle"
             p2="$time_offset" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_set_local_time_offset() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<!--
 test case(s)
-->
<TestCase name="Case_C3040" description="C3040: FIO Filtered Inputs and Transition Buffering" >
   <!-- set abort_mode to FALSE to attempt 'invalid' API function operations;
        script will proceed (not abort) in these cases to allow validation
        of the (forced) error -->
   <!-- when abort_mode is TRUE, script operates normally (abort on error) -->
   <Set var="$abort_mode" value="#TRUE"/>
   <Set var="$failed"     value="#FALSE"/>
   <Set var="$fio_view"   value="#FIO_VIEW_SYSTEM"/>
   <Set var="$input_type" value="#FIO_INPUTS_FILTERED"/>

   <!-- register two 'apps' with the FIO API -->
   <Call ref="fio_register" setUp="API_Init_Variables"/>
   <Set var="$fio_handle_1" value="$fio_handle"/>
   <Call ref="fio_register" setUp="API_Init_Variables"/>
   <Set var="$fio_handle_2" value="$fio_handle"/>
   
   <!-- register a 332-type FIO on SP5 each app --> 
   <Set var="$fio_port"   value="#FIO_SP5"/>
   <Set var="$fio_device" value="#FIO332"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_handle_2" value="$fiod_handle"/>
   <Set var="$fio_handle"    value="$fio_handle_1"/>
   <Call ref="fio_fiod_register" setUp="API_Init_Variables"/>
   <Set var="$fiod_handle_1" value="$fiod_handle"/>
   
   <!-- setup SDLC response messages (including transition buffering) -->
   <FIOResponse file="@Cxxxx_rsp177.txt" frame="%177" description="(c49->r177)"/>
   <FIOResponse file="@Cxxxx_rsp180a.txt" frame="%180" description="(c52->r180)"/>
   <FIOResponse file="@Cxxxx_rsp181a.txt" frame="%181" description="(c53->r181)"/>
   <FIOResponse file="@C3040_rsp182a.txt" frame="%182" description="(c54->r182)"/>
   <FIOResponse file="@Cxxxx_rsp183.txt" frame="%183" description="(c55->r183)"/>
   
   <!-- schedule the raw inputs request frame 52 -->
   <Set var="$frame_sched" index="%0" member="req_frame" value="%52"/>
   <Set var="$frame_sched" index="%0" member="frequency" value="#FIO_HZ_10"/>
   <Call ref="fio_fiod_frame_schedule_set" setUp="API_Init_Variables"/>

   <!-- enable FIO332 APP 1 -->
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>
   
   <!-- enable FIO332 APP 2 -->
   <Set var="$fio_handle"  value="$fio_handle_2"/>
   <Set var="$fiod_handle" value="$fiod_handle_2"/>
   <Call ref="fio_fiod_enable" setUp="API_Init_Variables"/>

   <!-- get input filters: confirm defaults are 5 samples (APIR3.1.2[59]) -->
   <Set var="$fio_handle"  value="$fio_handle_1"/>
   <Set var="$fiod_handle" value="$fiod_handle_1"/>
   <Call ref="fio_fiod_inputs_filter_get" setUp="API_Init_Variables" />
   <Set var="$input_filter" value="$input_filters" index="%0"/> 
   <If expression="$input_filter.leading NE %5">
      <Then>
      <Print>Default leading edge filter value not five (5)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$input_filter.trailing NE %5">
      <Then>
      <Print>Default trailing edge filter value not five (5)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>

   <!-- APP 1 change lead filter to 3, trailing filter to 3 (APIR3.1.2[56]) -->
   <Set var="$fio_handle"  value="$fio_handle_1"/>
   <Set var="$fiod_handle" value="$fiod_handle_1"/>
   <Set var="$input_filters" index="%0" member="input_point" value="%0"/>
   <Set var="$input_filters" index="%0" member="leading" value="%3"/>
   <Set var="$input_filters" index="%0" member="trailing" value="%3"/>
   <Call ref="fio_fiod_inputs_filter_set" setUp="API_Init_Variables" />
   <!-- verify new values -->
   <Call ref="fio_fiod_inputs_filter_get" setUp="API_Init_Variables" />
   <Set var="$input_filter" value="$input_filters" index="%0"/> 
   <If expression="$input_filter.input_point NE %0">
      <Then>
      <Print>Invalid input_point value</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$input_filter.leading NE %3">
      <Then>
      <Print>Default leading edge filter value not three (3)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$input_filter.trailing NE %3">
      <Then>
      <Print>Default trailing edge filter value not three (3)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>

   <!-- APP 2 change lead filter to 2, trailing filter to 4 -->
   <Set var="$fio_handle"  value="$fio_handle_2"/>
   <Set var="$fiod_handle" value="$fiod_handle_2"/>
   <Set var="$input_filters" index="%0" member="input_point" value="%0"/>
   <Set var="$input_filters" index="%0" member="leading" value="%2"/>
   <Set var="$input_filters" index="%0" member="trailing" value="%4"/>
   <Call ref="fio_fiod_inputs_filter_set" setUp="API_Init_Variables" /> 
   <!-- verify shortest values of App 1 and App 2 are used (APIR3.1.2[57]) -->
   <!-- verify values used are returned by set filter operation (APIR3.1.2[58]) -->
   <Set var="$input_filter" value="$input_filters" index="%0"/>
   <If expression="$input_filter.input_point NE %0">
      <Then>
      <Print>Invalid input_point value</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$input_filter.leading NE %2">
      <Then>
      <Print>Default leading edge filter value not two (2)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$input_filter.trailing NE %3">
      <Then>
      <Print>Default trailing edge filter value not three (3)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>

   <!-- transition buffer inputs (App 1) -->
   <!-- confirm monitoring is disabled by default for all inputs (APIR3.1.2[64]) -->
   <Set var="$fio_handle"  value="$fio_handle_1"/>
   <Set var="$fiod_handle" value="$fiod_handle_1"/>
   <Call ref="fio_fiod_inputs_trans_get" setUp="API_Init_Variables" /> 
   <Set var="$input_number" value="%0"/>
   <While expression="$input_number LT %64">
      <If expression="!FIO_BIT_TEST($inputs,%input_number) NE #FALSE">
         <Then>
         <Print>Default TB input monitoring error</Print>
         <Abort status="FAIL"/>
         </Then>
      </If>
      <Set var="$input_number" value="%1" operation="add"/>
   </While>
   
   <!-- disable all input transitions monitoring -->
   <Set var="$inputs" file="@C3040_inputs_null.txt"/>
   <Call ref="fio_fiod_inputs_trans_set" setUp="API_Init_Variables" /> 
   <!-- disable again, should be no error (APIR3.1.2[66]) -->
   <Set var="$inputs" file="@C3040_inputs_null.txt"/>
   <Call ref="fio_fiod_inputs_trans_set" setUp="API_Init_Variables" /> 
   
   <!-- enable select input transition monitoring (App 1) (APIR3.1.2[63]) -->
   <Set var="$inputs" file="@C3040_inputs_a.txt"/>
   <Call ref="fio_fiod_inputs_trans_set" setUp="API_Init_Variables" /> 
   <!-- verify test input transition point set -->
   <Call ref="fio_fiod_inputs_trans_get" setUp="API_Init_Variables" /> 
   <If expression="!FIO_BIT_TEST($inputs,%0) NE #TRUE">
      <Then>
      <Print>Input transition point set error</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- enable again, should be no error (APIR3.1.2[65]) -->
   <Set var="$inputs" file="@C3040_inputs_a.txt"/>
   <Call ref="fio_fiod_inputs_trans_set" setUp="API_Init_Variables" /> 
   
   <!-- enable same input transition point (App 2) -->
   <Set var="$fio_handle"  value="$fio_handle_2"/>
   <Set var="$fiod_handle" value="$fiod_handle_2"/>
   <Set var="$inputs" file="@C3040_inputs_a.txt"/>
   <Call ref="fio_fiod_inputs_trans_set" setUp="API_Init_Variables" /> 
   <!-- verify test input transition point set -->
   <Call ref="fio_fiod_inputs_trans_get" setUp="API_Init_Variables" /> 
   <If expression="!FIO_BIT_TEST($inputs,%0) NE #TRUE">
      <Then>
      <Print>Input transition point set error</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   
   <!-- create a transition entry -->
   <FIOResponse file="@C3040_rsp182b.txt" frame="%182" description="(c54->r182)"/>
   <Sleep time="%2"/>
   <!-- schedule the transition buffer request frame 54 -->
   <Set var="$frame_sched" index="%0" member="req_frame" value="%54"/>
   <Set var="$frame_sched" index="%0" member="frequency" value="#FIO_HZ_ONCE"/>
   <Call ref="fio_fiod_frame_schedule_set" setUp="API_Init_Variables"/>
   
   <Sleep time="%2"/>

   <!-- read transition entry (App 1) (APIR3.1.2[60]) -->
   <Set var="$fio_handle"  value="$fio_handle_1"/>
   <Set var="$fiod_handle" value="$fiod_handle_1"/>
   <Set var="$trans_count" value="%1"/>
   <Call ref="fio_fiod_inputs_trans_read" setUp="API_Init_Variables" />
   <Set var="$trans_entry" value="$trans_buf" index="%0"/> 
   <If expression="$trans_entry.input_point NE %0">
      <Then>
      <Print>Transition input point number error (1)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$trans_entry.state NE %1">
      <Then>
      <Print>Transition input point state error (1)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   
   <!-- create a second, different transition entry -->
   <FIOResponse file="@C3040_rsp182c.txt" frame="%182" description="(c54->r182)"/>
   <Sleep time="%2"/>
   <!-- schedule the transition buffer request frame 54 -->
   <Set var="$frame_sched" index="%0" member="req_frame" value="%54"/>
   <Set var="$frame_sched" index="%0" member="frequency" value="#FIO_HZ_ONCE"/>
   <Call ref="fio_fiod_frame_schedule_set" setUp="API_Init_Variables"/>
   
   <Sleep time="%2"/>

   <!-- confirm that we can read the same first entry (App 2) independent
        of newer transition frames (APIR3.1.2[67]) and unaffected by the
        earlier transition entry read by App 1 (APIR3.1.2[68]) -->
   <Set var="$fio_handle"  value="$fio_handle_2"/>
   <Set var="$fiod_handle" value="$fiod_handle_2"/>
   <Set var="$trans_count" value="%1"/>
   <Call ref="fio_fiod_inputs_trans_read" setUp="API_Init_Variables" /> 
   <Set var="$trans_entry" value="$trans_buf" index="%0"/> 
   <If expression="$trans_entry.input_point NE %0">
      <Then>
      <Print>Transition input point number error (2)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$trans_entry.state NE %1">
      <Then>
      <Print>Transition input point state error (2)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>

   <!-- read second transition entry (App 2) -->
   <Set var="$trans_count" value="%1"/>
   <Call ref="fio_fiod_inputs_trans_read" setUp="API_Init_Variables" /> 
   <Set var="$trans_entry" value="$trans_buf" index="%0"/> 
   <If expression="$trans_entry.input_point NE %0">
      <Then>
      <Print>Transition input point number error (3)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <If expression="$trans_entry.state NE %0">
      <Then>
      <Print>Transition input point state error (3)</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>

   <!-- enable input transitions (inputs 0,1,2,3,4) (App 2) -->
   <Set var="$inputs" file="@C3040_inputs_b.txt"/>
   <Call ref="fio_fiod_inputs_trans_set" setUp="API_Init_Variables" /> 

   <!-- generate a response buffer with 255 further transition entries
        and Field I/O Device overrun indication -->
   <FIOResponse file="@C3040_rsp182d.txt" frame="%182" description="(c54->r182)"/>
   <Sleep time="%2"/>
   <!-- schedule the transition buffer request frame 54 -->
   <Set var="$frame_sched" index="%0" member="req_frame" value="%54"/>
   <Set var="$frame_sched" index="%0" member="frequency" value="#FIO_HZ_ONCE"/>
   <Call ref="fio_fiod_frame_schedule_set" setUp="API_Init_Variables"/>
   
   <Sleep time="%2"/>

   <!-- verify that all 255 transitions are available (App 2) (APIR3.1.2[61]) -->
   <Set var="$trans_count" value="%255"/>
   <Call ref="fio_fiod_inputs_trans_read" setUp="API_Init_Variables" />
   <If expression="$trans_count NE %255">
      <Then>
      <Print>Transition count not 255</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- verify that the FIOD overrun status is returned (APIR3.1.2[69]) -->
   <If expression="$trans_status NE #FIO_TRANS_FIOD_OVERRUN">
      <Then>
      <Print>Transition status not FIO_TRANS_FIOD_OVERRUN</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>

   <!-- generate transition buffer response frames with > 1024 entries -->
   <FIOResponse file="@C3040_rsp182e.txt" frame="%182" description="(c54->r182)"/>
   <Sleep time="%2"/>
   <!-- schedule the transition buffer request frame 54 -->
   <Set var="$frame_sched" index="%0" member="req_frame" value="%54"/>
   <Set var="$frame_sched" index="%0" member="frequency" value="#FIO_HZ_5"/>
   <Call ref="fio_fiod_frame_schedule_set" setUp="API_Init_Variables"/>
   
   <Sleep time="%2"/>
   
   <Set var="$trans_count" value="%1024"/>
   <Call ref="fio_fiod_inputs_trans_read" setUp="API_Init_Variables" />
   <!-- verify that the API retains a FIFO of 1024 entries (APIR3.1.2[62]) -->
   <If expression="$trans_count NE %1024">
      <Then>
      <Print>Transition count not 1024</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>
   <!-- verify that the API overrun status is returned (APIR3.1.2[70]) -->
   <If expression="$trans_status NE #FIO_TRANS_APP_OVERRUN">
      <Then>
      <Print>Transition status not FIO_TRANS_APP_OVERRUN</Print>
      <Abort status="FAIL"/>
      </Then>
   </If>

   <!-- disable fiod (App2) -->
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>

   <!-- disable fiod (App1) -->
   <Set var="$fio_handle" value="$fio_handle_1"/>
   <Set var="$fiod_handle" value="$fiod_handle_1"/>
   <Call ref="fio_fiod_disable" setUp="API_Init_Variables"/>

   <!-- close both apps -->
   <Call ref="fio_deregister" setUp="API_Init_Variables"/>
   <Set var="$fio_handle" value="$fio_handle_2"/>
   <Call ref="fio_deregister" setUp="API_Init_Variables"/>
</TestCase>

<!--
 test suite(s)
-->
<TestSuite name="All_Test_Cases" description="Run All Test Cases" >
  <TestCaseRef ref="Case_C3040" />
</TestSuite>

</APIVSXML>

