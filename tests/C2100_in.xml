<?xml version="1.0" encoding="utf-8"?>
<APIVSXML>
<!--
 ATC 5401 API Reference Implementation Project 
 
     Filename: C2100_in.xml
    File Type: APIVSXML test script (XML format)
    Test Case: APIRI.TCS.2100
  Description: API Version Information (All Libraries)
       TC XML: begins on Line 239
       
 Test Case Narrative
 
   get FPUI versions (APIR3.2[1]) 
   get FIO versions (APIR3.2[1]) 
   get TOD version (APIR3.2[1]) 

 Requirements Tested
  
APIR3.2[1]	The API shall provide a method to determine the version number(s)
            of the API.

 Date      Revision    Description
 2/22/16   1.0         initial release
 2/24/16   1.1         second release
-->

<Define var="$fpui_handle"  type="fpui_handle" />
<Define var="$fio_handle"   type="FIO_APP_HANDLE" />
<Define var="$ver_string"   type="char []" size="%64" />
<Define var="$null_string"  type="char []" size="%64" />
<Define var="$fpui_ver"     type="int" />
<Define var="$fio_ver"      type="FIO_VERSION" />
<Define var="$returnCode"   type="int" />
<Define var="$errno"        type="int" />
<Define var="$flags"        type="int" />
<Define var="$regname"      type="char []" size="%16" />

<Define var="$abort_mode"   type="boolean" />
<Define var="$failed"       type="boolean" />

<!--
 subroutines for setUp, teardown, error logging
-->
<SetUp name="API_Init_Variables">
   <Set var="$returnCode"  value="%-1"/>
   <Set var="$errno"       value="%0"/>
</SetUp>

<Subroutine name="Error_Handler">
   <If expression="$errno EQ %1" >
      <Then> <Print>EPERM: Operation not permitted</Print> </Then> </If>
   <If expression="$errno EQ %2" >
      <Then> <Print>ENOENT: No such file or directory</Print> </Then> </If>
   <If expression="$errno EQ %3" >
      <Then> <Print>ESRCH: No such process</Print> </Then> </If>
   <If expression="$errno EQ %4" >
      <Then> <Print>EINTR: Interrupted system call</Print> </Then> </If>
   <If expression="$errno EQ %5" >
      <Then> <Print>EIO: I/O error</Print> </Then> </If>
   <If expression="$errno EQ %6" >
      <Then> <Print>ENXIO: No such device or address</Print> </Then> </If>
   <If expression="$errno EQ %7" >
      <Then> <Print>E2BIG: Argument list too long</Print> </Then> </If>
   <If expression="$errno EQ %8" >
      <Then> <Print>ENOEXEC: Exec format error</Print> </Then> </If>
   <If expression="$errno EQ %9" >
      <Then> <Print>EBADF: Bad file number</Print> </Then> </If>
   <If expression="$errno EQ %10" >
      <Then> <Print>ECHILD: No child processes</Print> </Then> </If>
   <If expression="$errno EQ %11" >
      <Then> <Print>EAGAIN: Try again</Print> </Then> </If>
   <If expression="$errno EQ %12" >
      <Then> <Print>ENOMEM: Out of memory</Print> </Then> </If>
   <If expression="$errno EQ %13" >
      <Then> <Print>EACCES: Permission denied</Print> </Then> </If>
   <If expression="$errno EQ %14" >
      <Then> <Print>EFAULT: Bad address</Print> </Then> </If>
   <If expression="$errno EQ %15" >
      <Then> <Print>ENOTBLK: Block device required</Print> </Then> </If>
   <If expression="$errno EQ %16" >
      <Then> <Print>EBUSY: Device or resource busy</Print> </Then> </If>
   <If expression="$errno EQ %17" >
      <Then> <Print>EEXIST: File exists</Print> </Then> </If>
   <If expression="$errno EQ %18" >
      <Then> <Print>EXDEV: Cross-device link</Print> </Then> </If>
   <If expression="$errno EQ %19" >
      <Then> <Print>ENODEV: No such device</Print> </Then> </If>
   <If expression="$errno EQ %20" >
      <Then> <Print>ENOTDIR: Not a directory</Print> </Then> </If>
   <If expression="$errno EQ %21" >
      <Then> <Print>EISDIR: Is a directory</Print> </Then> </If>
   <If expression="$errno EQ %22" >
      <Then> <Print>EINVAL: Invalid argument</Print> </Then> </If>
   <If expression="$errno EQ %23" >
      <Then> <Print>ENFILE: File table overflow</Print> </Then> </If>
   <If expression="$errno EQ %24" >
      <Then> <Print>EMFILE: Too many open files</Print> </Then> </If>
   <If expression="$errno EQ %25" >
      <Then> <Print>ENOTTY: Not a typewriter</Print> </Then> </If>
   <If expression="$errno EQ %26" >
      <Then> <Print>ETXTBSY: Text file busy</Print> </Then> </If>
   <If expression="$errno EQ %27" >
      <Then> <Print>EFBIG: File too large</Print> </Then> </If>
   <If expression="$errno EQ %28" >
      <Then> <Print>ENOSPC: No space left on device</Print> </Then> </If>
   <If expression="$errno EQ %29" >
      <Then> <Print>ESPIPE: Illegal seek</Print> </Then> </If>
   <If expression="$errno EQ %30" >
      <Then> <Print>EROFS: Read-only file system</Print> </Then> </If>
   <If expression="$errno EQ %31" >
      <Then> <Print>EMLINK: Too many links</Print> </Then> </If>
   <If expression="$errno EQ %32" >
      <Then> <Print>EPIPE: Broken pipe</Print> </Then> </If>
   <If expression="$errno EQ %33" >
      <Then> <Print>EDOM: Math argument out of domain of func</Print> </Then> </If>
   <If expression="$errno EQ %34" >
      <Then> <Print>ERANGE: Math result not representable</Print> </Then> </If>
      
   <Format var="$errno" />
   <Set var="$failed" value="#TRUE"/>
   <If expression="$abort_mode EQ #TRUE" >
      <Then> <Abort status="FAIL" /> </Then>
   <Else>
      <Print>Function failed properly (forced)</Print>
   </Else>
   </If>
</Subroutine>

<!--
 subroutines to call API functions and verify return status
-->
<Subroutine name="fpui_apiver" description="Call fpui_apiver()" >
   <Function funcName="fpui_apiver"
             return="$ver_string"
             errno="$errno"
             p1="$fpui_handle"
             p2="$fpui_ver" />
   <If expression="$ver_string EQ $null_string" >
      <Then>
      <Print>Function fpui_apiver() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$fpui_ver" />
      <Format var="$ver_string" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fpui_close" description="Call fpui_close()" >
   <Function funcName="fpui_close"
             return="$returnCode"
             errno="$errno"
             p1="$fpui_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fpui_close() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   </If>
</Subroutine>

<Subroutine name="fpui_open" description="Call fpui_open()" >
   <Function funcName="fpui_open"
             return="$fpui_handle"
             errno="$errno"
             p1="$flags"
             p2="$regname" />  <!-- $regname -->
   <If expression="$fpui_handle EQ %-1">
      <Then>
      <Print>Function fpui_open() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   </If>
</Subroutine>

<Subroutine name="fio_apiver" description="Call fio_apiver()" >
   <Function funcName="fio_apiver"
             return="$ver_string"
             errno="$errno"
             p1="$fio_handle"
             p2="$fio_ver" />
   <If expression="$ver_string EQ $null_string" >
      <Then>
      <Print>Function fio_apiver() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$fio_ver" />
      <Format var="$ver_string" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fio_deregister" description="Call fio_deregister()" >
   <Function funcName="fio_deregister"
             return="$returnCode"
             errno="$errno"
             p1="$fio_handle" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fio_deregister() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   </If>
</Subroutine>

<Subroutine name="fio_register" description="Call fio_register()" >
   <Function funcName="fio_register"
             return="$fio_handle"
             errno="$errno" />
   <If expression="$fio_handle EQ %-1">
      <Then>
      <Print>Function fio_register() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   </If>
</Subroutine>

<Subroutine name="tod_apiver" description="Call tod_apiver()" >
   <Function funcName="tod_apiver"
             return="$ver_string"
             errno="$errno" />
   <If expression="$ver_string EQ $null_string" >
      <Then>
      <Print>Function tod_apiver() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$ver_string" />
   </Else>
   </If>
</Subroutine>

<!--
 test case(s)
-->
<TestCase name="Case_C2100" description="C2100: API Version Information (All Libraries)" >
   <!-- set abort_mode to FALSE to attempt 'invalid' API function operations;
        script will proceed (not abort) in these cases to allow validation
        of the (forced) error -->
   <!-- when abort_mode is TRUE, script operates normally (abort on error) -->
   <Set var="$abort_mode"  value="#TRUE"/>
   <Set var="$failed"      value="#FALSE"/>
   <Set var="$null_string" value="@Cxxxx_null.txt"/>
   
   <Set var="$flags"   value="#O_RDWR"/>
   <Set var="$regname" value="@C2100"/>
   <Call ref="fpui_open" setUp="API_Init_Variables" />

   <!-- get FPUI versions (APIR3.2[1]) -->
   <Set var="$ver_string" value="@Cxxxx_null.txt"/>
   <Set var="$fpui_ver" value="%1"/>
   <Call ref="fpui_apiver" setUp="API_Init_Variables" />
   
   <Set var="$ver_string" value="@Cxxxx_null.txt"/>
   <Set var="$fpui_ver" value="%2"/>
   <Call ref="fpui_apiver" setUp="API_Init_Variables" />
   
   <Call ref="fpui_close" setUp="API_Init_Variables" />

   <Call ref="fio_register" setUp="API_Init_Variables" />

   <!-- get FIO versions (APIR3.2[1]) -->
   <Set var="$ver_string" value="@Cxxxx_null.txt"/>
   <Set var="$fio_ver" value="#FIO_VERSION_LIBRARY"/>
   <Call ref="fio_apiver" setUp="API_Init_Variables" />
   
   <Set var="$ver_string" value="@Cxxxx_null.txt"/>
   <Set var="$fio_ver" value="#FIO_VERSION_LKM"/>
   <Call ref="fio_apiver" setUp="API_Init_Variables" />

   <Call ref="fio_deregister" setUp="API_Init_Variables" />

   <!-- get TOD version (APIR3.2[1]) -->
   <Set var="$ver_string" value="@Cxxxx_null.txt"/>
   <Call ref="tod_apiver" setUp="API_Init_Variables" />
</TestCase>

<!--
 test suite(s)
-->
<TestSuite name="All_Test_Cases" description="Run All Test Cases" >
  <TestCaseRef ref="Case_C2100" />
</TestSuite>

</APIVSXML>

