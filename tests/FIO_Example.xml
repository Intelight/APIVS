<?xml version="1.0" encoding="utf-8"?>

<APIVSXML>
<!--

  This file contains an example of a sanity test case for the FIO API library.

  For the FIO (Field I/O) Library the example will perform all FIO functions needed to set up,
  configure, heartbeat and observe the watchdog functionality.

  The steps performed are:
	- Register with the FIO library using fio_register()
	- Register to use a FIOD with a watchdog point, using fio_fiod_register()
	- Register with the watchdog monitor service, using fio_fiod_wd_register()
	- Set the watchdog point to use, using fio_fiod_wd_reservation_set()
	- Get the watchdog point to use, and ensure it is the same point as that which was set,
	  using fio_fiod_wd_reservation_get()
	- Enable communications to the FIOD using fio_fiod_enable()
	- Set up the SDLC response message to send when a Set Outputs command message is sent by
	  the FIO API

	- Heartbeat the watchdog point using fio_fiod_wd_heartbeat()
	- Observe the actual watchdog point, and ensure it has toggled, using
          fio_fiod_outputs_get()
	- Observe the SDLC message that was sent and ensure the bit has toggled

	- Heartbeat the watchdog point using fio_fiod_wd_heartbeat()
	- Observe the actual watchdog point, and ensure it has toggled, using
          fio_fiod_outputs_get()
	- Observe the SDLC message that was sent and ensure the bit has toggled

	- Disable communications with the FIOD using fio_fiod_disable()
	- Deregister with the watchdog monitor service using fio_fiod_wd_deregister()
	- Deregister the FIOD used using fio_fiod_deregister()
	- Deregister with the FIO library using fio_deregister()

-->

<Define var="$returnCode" type="int" /><!-- Return code from function calls -->
<Define var="$errno" type="int" /><!-- Errno values -->
<Define var="$fio_handle" type="FIO_APP_HANDLE" /><!-- FIO Interface handle -->
<Define var="$fio_dev" type="FIO_DEV_HANDLE" /><!-- FIO FIOD Interface handle -->
<Define var="$wd_point_set" type="unsigned int" /><!-- WD point to use for set -->
<Define var="$wd_point_get" type="unsigned int" /><!-- WD point to use for get -->
<Define var="$ls_plus" type="unsigned char []" size="#FIO_INPUT_POINTS_BYTES" /><!-- Load Switch Plus Points -->
<Define var="$ls_minus" type="unsigned char []" size="#FIO_INPUT_POINTS_BYTES" /><!-- Load switch Minus Points -->
<Define var="$toggle" type="boolean" />


<!-- Set up subroutine to set FIO variables -->
<SetUp name="FIO_Set_Variables">

  <!-- Set variables to 0 -->
  <Set var="$returnCode" value="%0"/>
  <Set var="$errno" value="%0"/>

</SetUp>


<!-- Subroutine for calling fio_register() function and process -->
<Subroutine name="FIO_Register"
            description="Call fio_register()">

  <!-- fio_handle is set as if error, just to make sure -->
  <Set var="$fio_handle" value="%-1"/>

  <Function funcName="fio_register"
            description="Register with the FIO interface"
            return="$fio_handle"
            errno="$errno" />

  <!-- Make sure fio_register() succeeded -->
  <If expression="$fio_handle EQ %-1">
    <Then>
      <Print>Function fio_register() failed</Print>
	  <Format var="$fio_handle" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Subroutine for calling fio_fiod_register() function and process -->
<Subroutine name="FIO_FIOD_Register"
            description="Call fio_fiod_register()" >

  <!-- fio_handle is set as if error, just to make sure -->
  <Set var="$fio_dev" value="%-1"/>

  <Function funcName="fio_fiod_register"
            description="Register with the FIO FIOD interface"
            return="$fio_dev"
            errno="$errno"
            p1="$fio_handle"
            p2="#FIO_SP3"
            p3="#FIO332" />

  <!-- Make sure fio_fiod_register() succeeded -->
  <If expression="$fio_dev EQ %-1">
    <Then>
      <Print>Function fio_fiod_register() failed</Print>
	  <Format var="$fio_dev" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Subroutine for calling fio_fiod_wd_register() function and process -->
<Subroutine name="FIO_FIOD_WD_Register"
            description="Call fio_fiod_wd_register()" >

  <Function funcName="fio_fiod_wd_register"
            description="Register with the FIO FIOD WD interface"
            return="$returnCode"
            errno="$errno"
            p1="$fio_handle"
            p2="$fio_dev" />

  <!-- Make sure fio_fiod_wd_register() succeeded -->
  <If expression="$returnCode NE %0">
    <Then>
      <Print>Function fio_fiod_wd_register() failed</Print>
	  <Format var="$returnCode" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Subroutine for calling fio_fiod_wd_reservation_set() function and process -->
<Subroutine name="FIO_FIOD_WD_set"
            description="Call fio_fiod_wd_reservation_set()" >

  <!-- Set the WD point to use -->
  <Set var="$wd_point_set" value="%7"/>

  <Function funcName="fio_fiod_wd_reservation_set"
            description="Reserve an output point for WD"
            return="$returnCode"
            errno="$errno"
            p1="$fio_handle"
            p2="$fio_dev"
            p3="$wd_point_set" />

  <!-- Make sure fio_fiod_wd_reservation_set() succeeded -->
  <If expression="$returnCode NE %0">
    <Then>
      <Print>Function fio_fiod_wd_reservation_set() failed</Print>
	  <Format var="$returnCode" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Subroutine for calling fio_fiod_wd_reservation_get() function and process -->
<Subroutine name="FIO_FIOD_WD_get"
            description="Call fio_fiod_wd_reservation_get()" >

  <!-- Set the WD point to use to something other than what should be returned -->
  <Set var="$wd_point_get" value="%0"/>

  <Function funcName="fio_fiod_wd_reservation_get"
            description="Get the reserved WD point"
            return="$returnCode"
            errno="$errno"
            p1="$fio_handle"
            p2="$fio_dev"
            p3="$wd_point_get" />

  <!-- Make sure fio_fiod_wd_reservation_get() succeeded -->
  <If expression="$returnCode NE %0">
    <Then>
      <Print>Function fio_fiod_wd_reservation_get() failed</Print>
	  <Format var="$returnCode" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Subroutine for calling fio_fiod_enable() function and process -->
<Subroutine name="FIO_FIOD_enable"
            description="Call fio_fiod_enable()" >

  <Function funcName="fio_fiod_enable"
            description="Enable communications to FIOD"
            return="$returnCode"
            errno="$errno"
            p1="$fio_handle"
            p2="$fio_dev" />

  <!-- Make sure fio_fiod_enable() succeeded -->
  <If expression="$returnCode NE %0">
    <Then>
      <Print>Function fio_fiod_enable() failed</Print>
	  <Format var="$returnCode" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Subroutine for calling fio_fiod_wd_heartbeat() function and process -->
<Subroutine name="FIO_FIOD_WD_HB"
            description="Call fio_fiod_wd_heartbeat()" >

  <Function funcName="fio_fiod_wd_heartbeat"
            description="Heart Beat the watchdog"
            return="$returnCode"
            errno="$errno"
            p1="$fio_handle"
            p2="$fio_dev" />

  <!-- Make sure fio_fiod_wd_heartbeat() succeeded -->
  <If expression="$returnCode NE %0">
    <Then>
      <Print>Function fio_fiod_wd_heartbeat() failed</Print>
	  <Format var="$returnCode" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Subroutine for calling fio_fiod_outputs_get() function and process -->
<Subroutine name="FIO_FIOD_OUT_get"
            description="Call fio_fiod_outputs_get()" >

  <!-- Initial Load Switch Points to make sure a known value -->
  <Set var="$ls_plus" file="@fio_ls_plus.input" />
  <Set var="$ls_minus" file="@fio_ls_plus.input" />

  <Function funcName="fio_fiod_outputs_get"
            description="Get the FIOD output points"
            return="$returnCode"
            errno="$errno"
            p1="$fio_handle"
            p2="$fio_dev"
            p3="#FIO_VIEW_SYSTEM"
            p4="$ls_plus"
            p5="$ls_minus"
            p6="#FIO_INPUT_POINTS_BYTES" />

  <!-- Make sure fio_fiod_outputs_get() succeeded -->
  <If expression="$returnCode NE %0">
    <Then>
      <Print>Function fio_fiod_outputs_get() failed</Print>
	  <Format var="$returnCode" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

  <!-- Fake out the toggling of the WD bit -->
  <!-- <If expression="$toggle EQ #TRUE" >
    <Then>
	  <Set var="$ls_plus" file="@fio_ls_plus.input" />
	  <Set var="$toggle" value="#FALSE" />
	</Then>
	<Else>
	  <Set var="$ls_plus" file="@fio_ls_plus.input.toggle" />
	  <Set var="$toggle" value="#TRUE" />
	</Else>
  </If> -->

</Subroutine>


<!-- Subroutine for calling fio_fiod_disable() function and process -->
<Subroutine name="FIO_FIOD_disable"
            description="Call fio_fiod_disable()" >

  <Function funcName="fio_fiod_disable"
            description="Disable communications to FIOD"
            return="$returnCode"
            errno="$errno"
            p1="$fio_handle"
            p2="$fio_dev" />

  <!-- Make sure fio_fiod_disable() succeeded -->
  <If expression="$returnCode NE %0">
    <Then>
      <Print>Function fio_fiod_disable() failed</Print>
	  <Format var="$returnCode" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Subroutine for calling fio_fiod_wd_deregister() function and process -->
<Subroutine name="FIO_FIOD_WD_Deregister"
            description="Call fio_fiod_wd_deregister()" >

  <Function funcName="fio_fiod_wd_deregister"
            description="Deregister with the FIO FIOD WD interface"
            return="$returnCode"
            errno="$errno"
            p1="$fio_handle"
            p2="$fio_dev" />

  <!-- Make sure fio_fiod_wd_deregister() succeeded -->
  <If expression="$returnCode NE %0">
    <Then>
      <Print>Function fio_fiod_wd_deregister() failed</Print>
	  <Format var="$returnCode" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Subroutine for calling fio_fiod_deregister() function and process -->
<Subroutine name="FIO_FIOD_Deregister"
            description="Call fio_fiod_deregister()">

  <Function funcName="fio_fiod_deregister"
            description="Deregister with the FIO FIOD interface"
            return="$returnCode"
            errno="$errno"
            p1="$fio_handle"
            p2="$fio_dev" />

  <!-- Make sure fio_fiod_deregister() succeeded -->
  <If expression="$returnCode NE %0">
    <Then>
      <Print>Function fio_fiod_deregister() failed</Print>
	  <Format var="$returnCode" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Subroutine for calling fio_deregister() function and process -->
<Subroutine name="FIO_Deregister"
            description="Call fio_deregister()" >

  <Function funcName="fio_deregister"
            description="Deregister with the FIO interface"
            return="$returnCode"
            errno="$errno"
            p1="$fio_handle" />

  <!-- Make sure fio_deregister() succeeded -->
  <If expression="$returnCode NE %0">
    <Then>
      <Print>Function fio_deregister() failed</Print>
	  <Format var="$returnCode" />
	  <Format var="$errno" />
      <Abort status="FAIL" />
    </Then>
  </If>

</Subroutine>


<!-- Sanity Test Case for FIO API Library -->
<TestCase name="FIO_Sanity" description="Basic watchdog test of FIO" >

  <Set var="$toggle" value="#TRUE" />

  <!-- 
  FIO SANITY TEST INITIALIZATION AND SET UP
  -->

  <!-- Register with the FIO library using fio_register() -->
  <Call ref="FIO_Register"
        setUp="FIO_Set_Variables"
        description="fio_register: Register with FIO interface"
        />

  <!-- Register to use a FIOD with a watchdog point, using fio_fiod_register() -->
  <Call ref="FIO_FIOD_Register"
        setUp="FIO_Set_Variables"
        description="fio_fiod_register: Register with FIO FIOD interface"
        />

  <!-- Register with the watchdog monitor service, using fio_fiod_wd_register() -->
  <Call ref="FIO_FIOD_WD_Register"
        setUp="FIO_Set_Variables"
        description="fio_fiod_wd_register: Register with FIO FIOD WD interface"
        />

  <!-- Set the watchdog point to use, using fio_fiod_wd_reservation_set() -->
  <Call ref="FIO_FIOD_WD_set"
        setUp="FIO_Set_Variables"
        description="fio_fiod_wd_reservation_set: Reserve an output point for WD"
        />

  <!-- Get the watchdog point to use, and ensure it is the same point as that which was set,
       using fio_fiod_wd_reservation_get() -->
  <Call ref="FIO_FIOD_WD_get"
        setUp="FIO_Set_Variables"
        description="fio_fiod_wd_reservation_get: Get the reserved WD point" />

  <If expression="$wd_point_set NE $wd_point_get">
    <Then>
      <Print>Either fio_fiod_wd_reservation_set() or fio_fiod_wd_reservation_get() failed, since WD set [$wd_point_set] is not equal to WD get [$wd_point_get]</Print>
	  <Format var="$wd_point_set" />
	  <Format var="$wd_point_get" />
      <Abort status="FAIL" />
    </Then>
    <Else>
       <Print>WD point reservation succeeded ***</Print>
    </Else>
  </If>

  <!-- Set up the SDLC response message to send when an outputs command message is sent by
       the FIO API -->
  <FIOResponse file="@FIO_RSP_Frame_183"
			   frame="%183"
			   description="Initializing Response (Frame 183) to command (Frame 55)" />

  <!-- Enable communications to the FIOD using fio_fiod_enable() -->
  <Call ref="FIO_FIOD_enable"
        setUp="FIO_Set_Variables"
        description="fio_fiod_enable: Enable communications to FIOD" />

  <!--
  FIO SANITY TEST PROCESSING
  -->
  <!--
  TOGGLE THE WATCHDOG POINT AND MAKE SURE IT HAS
  -->

  <!-- Heartbeat the watchdog point using fio_fiod_wd_heartbeat() -->
  <Call ref="FIO_FIOD_WD_HB"
        setUp="FIO_Set_Variables"
        description="fio_fiod_wd_heartbeat: Heart Beat the watchdog"
        />

  <!-- Observe the actual watchdog point, and ensure it has toggled, using
       fio_fiod_outputs_get() -->
  <Call ref="FIO_FIOD_OUT_get"
        setUp="FIO_Set_Variables"
        description="fio_fiod_outputs_get: Get the FIOD output points" />

  <If expression="!FIO_BIT_TEST($ls_plus,$wd_point_set) EQ #TRUE">
    <Then>
      <Print>*** The WD bit toggled succeeded ***</Print>
    </Then>
    <Else>
      <Print>The WD output point did not toggle</Print>
      <Print>The current contents of the Response Messages are:</Print>
	  <Format var="$ls_plus" />
	  <Format var="$wd_point_set" />
      <Abort status="FAIL" />
    </Else>
  </If>

  <!-- 
        Wait for the next CMD_FRAME_55 to be sent using fio_fiod_frame_notify_register
  -->
  <!-- <Load load="CMDMSG" file="@FIO_CMD_Frame_55" frame="%55" /> -->
  <Dump dump="CMDMSG" file="@FIO_CMD_Frame_55_dump" frame="%55" />
  <!-- Observe the SDLC message that was sent and ensure the bit has toggled -->
  <If expression="!CMDMSGCompare(@FIO_CMD_Frame_55,%55) EQ #FALSE">
    <Then>
	  <Print>Command 55 does not match</Print>
      <Dump dump="CMDMSG" force="#TRUE" file="@FIO_CMD_Frame_55_dump" frame="%55" />
      <Abort status="FAIL" />
    </Then>
    <Else>
       <Print>*** Command 55 matched expected contents ***</Print>
    </Else>
  </If>

  <!--
  TOGGLE THE WATCHDOG POINT AND MAKE SURE IT HAS
  -->

  <FIOResponse file="@FIO_RSP_Frame_183_toggle"
			   frame="%183"
			   description="Initializing Toggled Response (Frame 183) to command (Frame 55)" />

  <!-- Heartbeat the watchdog point using fio_fiod_wd_heartbeat() -->
  <Call ref="FIO_FIOD_WD_HB"
        setUp="FIO_Set_Variables"
        description="fio_fiod_wd_heartbeat: Heart Beat the watchdog"
        />

  <!-- Observe the actual watchdog point, and ensure it has toggled, using
       fio_fiod_outputs_get() -->
  <Call ref="FIO_FIOD_OUT_get"
        setUp="FIO_Set_Variables"
        description="fio_fiod_outputs_get: Get the FIOD output points" />

  <If expression="!FIO_BIT_TEST($ls_plus,$wd_point_set) NE #FALSE">
    <Then>
      <Print>The WD output point did not toggle</Print>
      <Print>The current contents of the Response Messages are:</Print>
	  <Format var="$ls_plus" />
	  <Format var="$wd_point_set" />
      <Abort status="FAIL" />
    </Then>
    <Else>
       <Print>*** The WD bit toggled succeeded ***</Print>
    </Else>
  </If>

  <!-- <Load load="CMDMSG" file="@FIO_CMD_Frame_55" frame="%55" /> -->
  <Dump dump="CMDMSG" file="@FIO_CMD_Frame_55_dump" frame="%55" />

  <!-- Observe the SDLC message that was sent and ensure the bit has toggled -->
  <If expression="!CMDMSGCompare(@FIO_CMD_Frame_55,%55) NE #TRUE">
    <Then>
	  <Print>Command 55 does not match</Print>
      <Dump dump="CMDMSG" force="#TRUE" file="@FIO_CMD_Frame_55_dump" frame="%55" />
      <Abort status="FAIL" />
    </Then>
    <Else>
       <Print>*** Command 55 matched expected contents ***</Print>
    </Else>
  </If> -->
  -->


  <!--
  FIO SANITY TEST CLEANUP / SHUTDOWN
  -->

  <!-- Disable communications with the FIOD using fio_fiod_disable() -->
  <Call ref="FIO_FIOD_disable"
        setUp="FIO_Set_Variables"
        description="fio_fiod_disable: Disable communications to FIOD"
        />

  <!-- Deregister with the watchdog monitor service using fio_fiod_wd_deregister() -->
  <Call ref="FIO_FIOD_WD_Deregister"
        setUp="FIO_Set_Variables"
        description="fio_fiod_wd_deregister: Deregister with FIO FIOD WD interface"
        />

  <!-- Deregister the FIOD used using fio_fiod_deregister() -->
  <Call ref="FIO_FIOD_Deregister"
        setUp="FIO_Set_Variables"
        description="fio_fiod_deregister: Deregister with FIO FIOD interface"
        />

  <!-- Deregister with the FIO library using fio_deregister() -->
  <Call ref="FIO_Deregister"
        setUp="FIO_Set_Variables"
        description="fio_deregister: Deregister with FIO interface" />

</TestCase>

<!-- Test Suite of sanity tests -->
<TestSuite name="Sanity Test Suite"
           description="Collection of Sanity Test Cases"
           >

  <TestCaseRef ref="FIO_Sanity" />

</TestSuite>

</APIVSXML>
