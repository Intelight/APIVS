<?xml version="1.0" encoding="utf-8"?>
<APIVSXML>
<!--
 ATC 5401 API Reference Implementation Project 
 
     Filename: C7020_in.xml
    File Type: APIVSXML test script (XML format)
    Test Case: APIRI.TCS.7020
  Description: Bell Activation and Application Termination
       TC XML: begins on Line 258
       
 Test Case Narrative
 
   setup App #1 
   turn on backlight for 120 seconds 
   write regname and bell state to VD 
   setup App #2  
   turn on backlight for 120 seconds 
   write regname and bell state to VD 
   loop for 120 seconds 
      send BELL character to display for App #2
   terminate without closing either app's FPUI handle (abnormal) 

 Requirements Tested
       
APIR3.1.1.2[24]	The bell of the controllerâ€™s Front Panel shall be activated
                  only if a bell character, ^G (hex value 07), is sent from an
                  application program which has a window that has focus.

APIR3.1.1.2[25]	If a bell character is sent from an application program that
                  does not have a window that has focus, the bell character
                  shall be ignored by the API.

APIR3.1.2[134]	   When an application program exits or terminates for any reason,
                  the API shall deregister the application program from the API.
                  
 Date      Revision    Description
 2/22/16   1.0         initial release
 2/24/16   1.1         second release
-->

<Define var="$fpui_handle"  type="fpui_handle" />
<Define var="$errno"        type="int" />
<Define var="$returnCode"   type="int" />
<Define var="$char_index"   type="int" />
<Define var="$char_buf"     type="unsigned char []" size="%8" />
<Define var="$backlight"    type="boolean" />
<Define var="$row"          type="int" />
<Define var="$column"       type="int" />
<Define var="$focus"        type="boolean" />
<Define var="$flags"        type="int" />
<Define var="$regname"      type="char []" size="%16" />
<Define var="$timeout"      type="int" />
<Define var="$write_buf"    type="char []" size="%32" />
<Define var="$write_len"    type="int" />
<Define var="$write_cnt"    type="ssize_t" />
<Define var="$write_chr"    type="char" />
<Define var="$panel"        type="int" />
<Define var="$sleep_count"  type="int" />

<Define var="$abort_mode"   type="boolean" />
<Define var="$failed"       type="boolean" />

<!--
 subroutines for setUp, teardown, error logging, FPM return
-->
<SetUp name="API_Init_Variables">
   <Set var="$returnCode"  value="%-1"/>
   <Set var="$errno"       value="%0"/>
</SetUp>

<Subroutine name="Error_Handler">
   <If expression="$errno EQ %1" >
      <Then> <Print>EPERM: Operation not permitted</Print> </Then> </If>
   <If expression="$errno EQ %2" >
      <Then> <Print>ENOENT: No such file or directory</Print> </Then> </If>
   <If expression="$errno EQ %3" >
      <Then> <Print>ESRCH: No such process</Print> </Then> </If>
   <If expression="$errno EQ %4" >
      <Then> <Print>EINTR: Interrupted system call</Print> </Then> </If>
   <If expression="$errno EQ %5" >
      <Then> <Print>EIO: I/O error</Print> </Then> </If>
   <If expression="$errno EQ %6" >
      <Then> <Print>ENXIO: No such device or address</Print> </Then> </If>
   <If expression="$errno EQ %7" >
      <Then> <Print>E2BIG: Argument list too long</Print> </Then> </If>
   <If expression="$errno EQ %8" >
      <Then> <Print>ENOEXEC: Exec format error</Print> </Then> </If>
   <If expression="$errno EQ %9" >
      <Then> <Print>EBADF: Bad file number</Print> </Then> </If>
   <If expression="$errno EQ %10" >
      <Then> <Print>ECHILD: No child processes</Print> </Then> </If>
   <If expression="$errno EQ %11" >
      <Then> <Print>EAGAIN: Try again</Print> </Then> </If>
   <If expression="$errno EQ %12" >
      <Then> <Print>ENOMEM: Out of memory</Print> </Then> </If>
   <If expression="$errno EQ %13" >
      <Then> <Print>EACCES: Permission denied</Print> </Then> </If>
   <If expression="$errno EQ %14" >
      <Then> <Print>EFAULT: Bad address</Print> </Then> </If>
   <If expression="$errno EQ %15" >
      <Then> <Print>ENOTBLK: Block device required</Print> </Then> </If>
   <If expression="$errno EQ %16" >
      <Then> <Print>EBUSY: Device or resource busy</Print> </Then> </If>
   <If expression="$errno EQ %17" >
      <Then> <Print>EEXIST: File exists</Print> </Then> </If>
   <If expression="$errno EQ %18" >
      <Then> <Print>EXDEV: Cross-device link</Print> </Then> </If>
   <If expression="$errno EQ %19" >
      <Then> <Print>ENODEV: No such device</Print> </Then> </If>
   <If expression="$errno EQ %20" >
      <Then> <Print>ENOTDIR: Not a directory</Print> </Then> </If>
   <If expression="$errno EQ %21" >
      <Then> <Print>EISDIR: Is a directory</Print> </Then> </If>
   <If expression="$errno EQ %22" >
      <Then> <Print>EINVAL: Invalid argument</Print> </Then> </If>
   <If expression="$errno EQ %23" >
      <Then> <Print>ENFILE: File table overflow</Print> </Then> </If>
   <If expression="$errno EQ %24" >
      <Then> <Print>EMFILE: Too many open files</Print> </Then> </If>
   <If expression="$errno EQ %25" >
      <Then> <Print>ENOTTY: Not a typewriter</Print> </Then> </If>
   <If expression="$errno EQ %26" >
      <Then> <Print>ETXTBSY: Text file busy</Print> </Then> </If>
   <If expression="$errno EQ %27" >
      <Then> <Print>EFBIG: File too large</Print> </Then> </If>
   <If expression="$errno EQ %28" >
      <Then> <Print>ENOSPC: No space left on device</Print> </Then> </If>
   <If expression="$errno EQ %29" >
      <Then> <Print>ESPIPE: Illegal seek</Print> </Then> </If>
   <If expression="$errno EQ %30" >
      <Then> <Print>EROFS: Read-only file system</Print> </Then> </If>
   <If expression="$errno EQ %31" >
      <Then> <Print>EMLINK: Too many links</Print> </Then> </If>
   <If expression="$errno EQ %32" >
      <Then> <Print>EPIPE: Broken pipe</Print> </Then> </If>
   <If expression="$errno EQ %33" >
      <Then> <Print>EDOM: Math argument out of domain of func</Print> </Then> </If>
   <If expression="$errno EQ %34" >
      <Then> <Print>ERANGE: Math result not representable</Print> </Then> </If>
      
   <Format var="$errno" />
   <Set var="$failed" value="#TRUE"/>
   <If expression="$abort_mode EQ #TRUE" >
      <Then> <Abort status="FAIL" /> </Then>
   <Else>
      <Print>Function failed properly (forced)</Print>
   </Else>
   </If>
</Subroutine>

<Subroutine name="Success_Handler">
   <If expression="$abort_mode EQ #FALSE" >
      <Then>
      <Print>Function succeeded but should have failed</Print>
      <Abort status="FAIL" />
      </Then>
   </If>
</Subroutine>

<!--
 subroutines to call API functions and verify return status
-->
<Subroutine name="fpui_open" description="Call fpui_open()" >
   <Function funcName="fpui_open"
             return="$fpui_handle"
             errno="$errno"
             p1="$flags"
             p2="$regname" />  <!-- $regname -->
   <If expression="$fpui_handle EQ %-1">
      <Then>
      <Print>Function fpui_open() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fpui_set_backlight" description="Call fpui_set_backlight()" >
   <Function funcName="fpui_set_backlight"
             return="$returnCode"
             errno="$errno"
             p1="$fpui_handle"
             p2="$backlight" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fpui_set_backlight() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fpui_set_backlight_timeout" description="Call fpui_set_backlight_timeout()" >
   <Function funcName="fpui_set_backlight_timeout"
             return="$returnCode"
             errno="$errno"
             p1="$fpui_handle"
             p2="$timeout" />
   <If expression="$returnCode EQ %-1">
      <Then>
      <Print>Function fpui_set_backlight_timeout() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fpui_write_char" description="Call fpui_write_char()" >
   <Function funcName="fpui_write_char"
             return="$write_cnt"
             errno="$errno"
             p1="$fpui_handle"
             p2="$write_chr" />
   <If expression="$write_cnt EQ %-1">
      <Then>
      <Print>Function fpui_write_char() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$write_chr" />
      <Format var="$write_cnt" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<Subroutine name="fpui_write_string_at" description="Call fpui_write_string_at()" >
   <Function funcName="fpui_write_string_at"
             return="$write_cnt"
             errno="$errno"
             p1="$fpui_handle"
             p2="$write_buf"
             p3="$row"
             p4="$column" />
   <If expression="$write_cnt EQ %-1">
      <Then>
      <Print>Function fpui_write_string_at() failed</Print>
      <Call ref="Error_Handler" />
      </Then>
   <Else>
      <Format var="$write_buf" />
      <Format var="$write_cnt" />
      <Call ref="Success_Handler" />
   </Else>
   </If>
</Subroutine>

<!--
 test case(s)
-->
<TestCase name="Case_C7020" description="C7020: FPUI Bell Activation and Application Termination" >
   <!-- set abort_mode to FALSE to attempt 'invalid' API function operations;
        script will proceed (not abort) in these cases to allow validation
        of the (forced) error -->
   <!-- when abort_mode is TRUE, script operates normally (abort on error) -->
   <Set var="$abort_mode" value="#TRUE"/>
   <Set var="$failed"     value="#FALSE"/>

   <!-- setup App #1 -->
   <Set var="$flags"     value="#O_RDWR"/>
   <Set var="$regname"   value="@C7020_00"/>
   <Call ref="fpui_open" setUp="API_Init_Variables"/>
   
   <!-- turn on backlight for 120 seconds -->
   <Set var="$backlight" value="#TRUE"/>
   <Call ref="fpui_set_backlight" setUp="API_Init_Variables"/>
   <Set var="$timeout" value="%120"/>
   <Call ref="fpui_set_backlight_timeout" setUp="API_Init_Variables"/>

   <!-- write regname and bell state to VD -->
   <Set var="$row"       value="%3"/>
   <Set var="$column"    value="%5"/>
   <Set var="$write_buf" value="$regname"/>
   <Call ref="fpui_write_string_at" setUp="API_Init_Variables"/>
   <Set var="$row"       value="%4"/>
   <Set var="$column"    value="%5"/>
   <Set var="$write_buf" value="@Bell is OFF"/>
   <Call ref="fpui_write_string_at" setUp="API_Init_Variables"/>
   
   <!-- setup App #2  -->
   <Set var="$flags"     value="#O_RDWR"/>
   <Set var="$regname"   value="@C7020_01"/>
   <Call ref="fpui_open" setUp="API_Init_Variables"/>
   
   <!-- turn on backlight for 120 seconds -->
   <Set var="$backlight" value="#TRUE"/>
   <Call ref="fpui_set_backlight" setUp="API_Init_Variables"/>
   <Set var="$timeout" value="%120"/>
   <Call ref="fpui_set_backlight_timeout" setUp="API_Init_Variables"/>

   <!-- write regname and bell state to VD -->
   <Set var="$row"       value="%3"/>
   <Set var="$column"    value="%5"/>
   <Set var="$write_buf" value="$regname"/>
   <Call ref="fpui_write_string_at" setUp="API_Init_Variables"/>
   <Set var="$row"       value="%4"/>
   <Set var="$column"    value="%5"/>
   <Set var="$write_buf" value="@Bell is ON (0.5Hz)"/>
   <Call ref="fpui_write_string_at" setUp="API_Init_Variables"/>
   
   <!-- loop for 120 seconds -->
   <Set var="$sleep_count" value="%120"/> 
   <While expression="$sleep_count NE %0"> 
      <!-- send BELL character to display for App #2-->
      <Set var="$write_chr" value="%7"/> 
      <Call ref="fpui_write_char" setUp="API_Init_Variables"/>
      <Sleep time="%2"/> 
      <Set var="$sleep_count" operation="subtract" value="%2"/> 
   </While> 
   
   <!-- terminate without closing either app's FPUI handle (abnormal) -->
</TestCase>

<!--
 test suite(s)
-->
<TestSuite name="All_Test_Cases" description="Run All Test Cases" >
  <TestCaseRef ref="Case_C7020" />
</TestSuite>

</APIVSXML>

